<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_HomeNC_Test" Id="{0f089b23-a654-4e4f-b104-c56af0e6d9b3}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_HomeNC_Test EXTENDS FB_TestSuite
VAR
    fbAxisRef : ARRAY [1..5] OF AXIS_REF;
    fbLimSwStatus : ARRAY [1..5] OF FB_LimSwStatus_TestDouble;
    //fbMotionLogger : FB_MotionLogger;
    fbMotionLogger : ARRAY [1..5] OF FB_MotionLogger;
    fbPower : ARRAY [1..5] OF FB_PowerNC[	(AxisRef := fbAxisRef[1]),
                                            (AxisRef := fbAxisRef[2]),
                                            (AxisRef := fbAxisRef[3]),
                                            (AxisRef := fbAxisRef[4]),
                                            (AxisRef := fbAxisRef[5])
                                            ];
    nHome : UINT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[GivenHomeCmdNoneThenHomeDoneIsTrue_Test1();
GivenHomeCmdAbsoluteSetThenThenAndHomeDoneAndPositionSetToUserDefineOffset_Test2();
THIS^.GivenHomeCmdSetToLowLimitAndALowLimitPulseThenAndHomeDoneAndPositionSetToUserDefineOffset_Test3();
]]></ST>
    </Implementation>
    <Method Name="GivenHomeCmdAbsoluteSetThenThenAndHomeDoneAndPositionSetToUserDefineOffset_Test2" Id="{d4754e57-693c-40b7-9460-2ffc5ab4a21b}">
      <Declaration><![CDATA[METHOD PRIVATE GivenHomeCmdAbsoluteSetThenThenAndHomeDoneAndPositionSetToUserDefineOffset_Test2
VAR_INST
    fbHome : FB_HomeNC(AxisRef:=fbAxisRef[2], iLimSwStatus:=fbLimSwStatus[2],iMotionLogger:=fbMotionLogger[2]):=(Mode:=E_EpicsHomeCmd.ABSOLUTE_SET);
    fbTestTimer: TON := (IN:=TRUE, PT:=T#5S);
    nTestStep : INT;
    fExpectedPosition : LREAL := 20.0;
    fActPosition : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

fbLimSwStatus[2]();
fbMotionLogger[2]();

CASE nTestStep OF
    0:

        fbPower[2].Power(	Enable:=TRUE,
                            Enable_Positive:=fbLimSwStatus[2].LimForward,
                            Enable_Negative:=fbLimSwStatus[2].LimBackward,
                            Override:=100.0);
               fbHome.Mode := E_EpicsHomeCmd.ABSOLUTE_SET;
               nTestStep := nTestStep + 1;
    1:
    IF fbPower[2].PowerIsEnabled THEN
        fbHome.Home(Position:=20.0,BufferMode:=MC_BufferMode.MC_Aborting);
        nTestStep := nTestStep + 1;
    END_IF

    2:
        IF fbHome.Done THEN
            nTestStep := nTestStep + 1;
        END_IF
    3:
     //
END_CASE

fbPower[2]();
fbHome();

fbTestTimer(IN := TRUE);

IF nTestStep = 3 THEN
AssertTrue(Condition := fbAxisRef[2].Status.Homed,
           Message := 'Axis not calibrated #1');
    AssertEquals_LREAL ( Delta:=0.001, Expected:=fExpectedPosition, Actual:=fbAxisRef[2].NcToPlc.ActPos,
            Message:='Position is not the expected #2');
    TEST_FINISHED();
ELSIF fbTestTimer.Q THEN
    AssertTrue(
        Condition := FALSE,
        Message := CONCAT('Timed out at step: ', TO_STRING(nTestStep))
    );

    TEST_FINISHED();
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GivenHomeCmdNoneThenHomeDoneIsTrue_Test1" Id="{828068d5-3f4b-4e81-8832-2d3b09781313}">
      <Declaration><![CDATA[METHOD PRIVATE GivenHomeCmdNoneThenHomeDoneIsTrue_Test1
VAR_INST
    fbHome : FB_HomeNC(AxisRef:=fbAxisRef[1], iLimSwStatus:=fbLimSwStatus[1],iMotionLogger:=fbMotionLogger[1]):=(Mode:=E_EpicsHomeCmd.ABSOLUTE_SET);
    fbTestTimer: TON := (IN:=TRUE, PT:=T#5S);
    nTestStep : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

fbLimSwStatus[1]();
fbMotionLogger[1]();

CASE nTestStep OF
    0:

        fbPower[1].Power(	Enable:=TRUE,
                            Enable_Positive:=fbLimSwStatus[1].LimForward,
                            Enable_Negative:=fbLimSwStatus[1].LimBackward,
                            Override:=100.0);
               fbHome.Mode := E_EpicsHomeCmd.NONE;
                nTestStep := nTestStep + 1;
    1:
    IF fbPower[1].PowerIsEnabled THEN
        fbHome.Home(Position:=0.0,BufferMode:=MC_BufferMode.MC_Aborting);
        nTestStep := nTestStep + 1;
    END_IF

    2:
        IF fbHome.Done THEN
            nTestStep := nTestStep + 1;
        END_IF
    3:
     //
END_CASE

fbPower[1]();
fbHome();

fbTestTimer(IN := TRUE);

IF nTestStep = 3 THEN

    TEST_FINISHED();
ELSIF fbTestTimer.Q THEN
    AssertTrue(
        Condition := FALSE,
        Message := CONCAT('Timed out at step: ', TO_STRING(nTestStep))
    );

    TEST_FINISHED();
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GivenHomeCmdSetToHighLimitAndAHighLimitPulseThenAndHomeDoneAndPositionSetToUserDefineOffset_Test4" Id="{d6dfc9cc-8559-4032-bc50-ad12f2b74624}">
      <Declaration><![CDATA[METHOD PRIVATE GivenHomeCmdSetToHighLimitAndAHighLimitPulseThenAndHomeDoneAndPositionSetToUserDefineOffset_Test4
VAR_INST
    fbHome : FB_HomeNC(AxisRef:=fbAxisRef[3], iLimSwStatus:=fbLimSwStatus[3],iMotionLogger:=fbMotionLogger[3]):=(Mode:=E_EpicsHomeCmd.ABSOLUTE_SET);
    fbTestTimer: TON := (IN:=TRUE, PT:=T#5S);
    fbCamSwitchPulserSearch: TON := (IN:=TRUE, PT:=T#2000MS);
    fbCamSwitchPulserSync: TON := (PT:=T#500MS);
    nTestStep : INT;
    fExpectedPosition : LREAL := 20.0;
    fActPosition : LREAL;

END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

fbLimSwStatus[3]();
fbMotionLogger[3]();

CASE nTestStep OF
    0:
        fbLimSwStatus[3].LimForward	:= TRUE;
        fbLimSwStatus[3].LimBackward := TRUE;
        fbPower[3].Power(	Enable:=TRUE,
                            Enable_Positive:=fbLimSwStatus[3].LimForward,
                            Enable_Negative:=fbLimSwStatus[3].LimBackward,
                            Override:=100.0);
        fbHome.Mode := E_EpicsHomeCmd.LOW_LIMIT;
        nTestStep := nTestStep + 1;
    1:
    IF fbPower[3].PowerIsEnabled THEN
        fbHome.Home(Position:=20.0,BufferMode:=MC_BufferMode.MC_Aborting);
        nTestStep := nTestStep + 1;
    END_IF

    2:
        IF fbCamSwitchPulserSearch.Q THEN
            fbLimSwStatus[3].LimBackward := FALSE;
            fbCamSwitchPulserSearch.IN := FALSE;
            fbCamSwitchPulserSync.IN := TRUE;
            nTestStep := nTestStep + 1;
        END_IF
    3:
        IF fbCamSwitchPulserSync.Q THEN
            fbLimSwStatus[3].LimBackward := TRUE;
            nTestStep := nTestStep + 1;
        END_IF
    4:
        IF fbHome.Done THEN
            nTestStep := nTestStep + 1;
        END_IF
    5:;
END_CASE

fbPower[3]();
fbHome();

fbCamSwitchPulserSearch();
fbCamSwitchPulserSync();
fbTestTimer();

IF nTestStep = 5 THEN
AssertTrue(Condition := fbAxisRef[3].Status.Homed,
           Message := 'Axis not calibrated #1');
    AssertEquals_LREAL ( Delta:=0.5, Expected:=fExpectedPosition, Actual:=fbAxisRef[3].NcToPlc.ActPos,
            Message:='Position is not the expected value #1');
    TEST_FINISHED();
ELSIF fbTestTimer.Q THEN
    AssertTrue(
        Condition := FALSE,
        Message := CONCAT('Timed out at step: ', TO_STRING(nTestStep))
    );

    TEST_FINISHED();
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GivenHomeCmdSetToLowLimitAndALowLimitPulseThenAndHomeDoneAndPositionSetToUserDefineOffset_Test3" Id="{258c5fca-fb29-4806-85ec-0c0567cfff16}">
      <Declaration><![CDATA[METHOD PRIVATE GivenHomeCmdSetToLowLimitAndALowLimitPulseThenAndHomeDoneAndPositionSetToUserDefineOffset_Test3
VAR_INST
    fbHome : FB_HomeNC(AxisRef:=fbAxisRef[3], iLimSwStatus:=fbLimSwStatus[3],iMotionLogger:=fbMotionLogger[3]):=(Mode:=E_EpicsHomeCmd.ABSOLUTE_SET);
    fbTestTimer: TON := (IN:=TRUE, PT:=T#5S);
    fbCamSwitchPulserSearch: TON := (IN:=TRUE, PT:=T#2000MS);
    fbCamSwitchPulserSync: TON := (PT:=T#500MS);
    nTestStep : INT;
    fExpectedPosition : LREAL := 20.0;
    fActPosition : LREAL;

END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

fbLimSwStatus[3]();
fbMotionLogger[3]();

CASE nTestStep OF
    0:
        fbLimSwStatus[3].LimForward	:= TRUE;
        fbLimSwStatus[3].LimBackward := TRUE;
        fbPower[3].Power(	Enable:=TRUE,
                            Enable_Positive:=fbLimSwStatus[3].LimForward,
                            Enable_Negative:=fbLimSwStatus[3].LimBackward,
                            Override:=100.0);
        fbHome.Mode := E_EpicsHomeCmd.LOW_LIMIT;
        nTestStep := nTestStep + 1;
    1:
    IF fbPower[3].PowerIsEnabled THEN
        fbHome.Home(Position:=20.0,BufferMode:=MC_BufferMode.MC_Aborting);
        nTestStep := nTestStep + 1;
    END_IF

    2:
        IF fbCamSwitchPulserSearch.Q THEN
            fbLimSwStatus[3].LimBackward := FALSE;
            fbCamSwitchPulserSearch.IN := FALSE;
            fbCamSwitchPulserSync.IN := TRUE;
            nTestStep := nTestStep + 1;
        END_IF
    3:
        IF fbCamSwitchPulserSync.Q THEN
            fbLimSwStatus[3].LimBackward := TRUE;
            nTestStep := nTestStep + 1;
        END_IF
    4:
        IF fbHome.Done THEN
            nTestStep := nTestStep + 1;
        END_IF
    5:;
END_CASE

fbPower[3]();
fbHome();

fbCamSwitchPulserSearch();
fbCamSwitchPulserSync();
fbTestTimer();

IF nTestStep = 5 THEN
AssertTrue(Condition := fbAxisRef[3].Status.Homed,
           Message := 'Axis not calibrated #1');
    AssertEquals_LREAL ( Delta:=0.5, Expected:=fExpectedPosition, Actual:=fbAxisRef[3].NcToPlc.ActPos,
            Message:='Position is not the expected value #1');
    TEST_FINISHED();
ELSIF fbTestTimer.Q THEN
    AssertTrue(
        Condition := FALSE,
        Message := CONCAT('Timed out at step: ', TO_STRING(nTestStep))
    );

    TEST_FINISHED();
END_IF
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>