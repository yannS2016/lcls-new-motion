<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_MoveRequest_Test" Id="{05d79949-1f03-4557-a858-9a547a52b2be}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_MoveRequest_Test EXTENDS FB_TestSuite
VAR
        stMotionCommand :  ARRAY[1..10] OF ST_MotionCommand;
		stMotionStatus :  ARRAY[1..10] OF ST_MotionStatus;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[GivenMoveRequestAndInterlockAndErrorStatusUpdateRequestStatus_Test1();
GivenMoveRequestDisabledWhenInterlockFalseAlwaysMode_Test2();
GivenAlwaysModeEnableWhenInterlockTrue_Test3();
GivenDuringMotionDisableWhenInterlockFalse_Test4();
GivenDuringMotionEnableWhenInterlockTrue_Test5();
GivenAbsoluteMoveCorrectFlags_Test6();
GivenHomeMoveCorrectFlags_Test7();
GivenInitMoveRequestSetsBusyClearsDoneAndErrorMsg_Test8();
GivenExecuteFlagsSetAndCleared_Test9();]]></ST>
    </Implementation>
    <Method Name="GivenAbsoluteMoveCorrectFlags_Test6" Id="{eba4e7e3-8280-4f48-b86f-8ce6b1dba452}">
      <Declaration><![CDATA[METHOD PRIVATE GivenAbsoluteMoveCorrectFlags_Test6
VAR_INST
    fbMoveRequest : FB_EpicsMoveRequest(
		stMotionCommand:=stMotionCommand[7],
		stMotionStatus:=stMotionStatus[7]
	);
	eExpectedMoveMode :E_EpicsMotorCmd := E_EpicsMotorCmd.MOVE_ABSOLUTE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// ----------- Absolute Move Command: flags and mode correctness -------------
TEST(__POUNAME());

fbMoveRequest.MoveRequestCmds(
    HomeCmd    := FALSE,
    MoveCmd    := TRUE,
    MoveOk     := TRUE,
    EnableDone := TRUE,
    HomeMode   := E_EpicsHomeCmd.NONE,
    EnableMode := E_StageEnableMode.DURING_MOTION
);
fbMoveRequest();

AssertTrue(fbMoveRequest.Status.bNewMoveReq, 'Should register move request');
AssertTrue(fbMoveRequest.Status.bExecMove, 'Should be ready for move');
AssertFalse(fbMoveRequest.Status.bExecHome, 'Should not be ready for home');
AssertEquals_INT(eExpectedMoveMode, fbMoveRequest.Status.nCommand, 'Command=absolute');
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="GivenAlwaysModeEnableWhenInterlockTrue_Test3" Id="{d82ee862-bea2-4e8d-a61b-4099a1390ec7}">
      <Declaration><![CDATA[METHOD PRIVATE GivenAlwaysModeEnableWhenInterlockTrue_Test3
VAR_INST
    fbMoveRequest : FB_EpicsMoveRequest(
		stMotionCommand:=stMotionCommand[4],
		stMotionStatus:=stMotionStatus[4]
	);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// ----------- Always mode: should enable if interlock met -------------
TEST(__POUNAME());

fbMoveRequest.MoveRequestCmds(
    HomeCmd    := FALSE,
    MoveCmd    := TRUE,
    MoveOk     := TRUE,
    EnableDone := TRUE,
    HomeMode   := E_EpicsHomeCmd.NONE,
    EnableMode := E_StageEnableMode.ALWAYS
);
fbMoveRequest();

AssertTrue( fbMoveRequest.Status.bEnable, 'Should be enabled when MoveOk is TRUE in ALWAYS mode' );
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="GivenDuringMotionDisableWhenInterlockFalse_Test4" Id="{8b3af516-df20-48dc-b711-3e174c3bf426}">
      <Declaration><![CDATA[METHOD PRIVATE GivenDuringMotionDisableWhenInterlockFalse_Test4
VAR_INST
    fbMoveRequest : FB_EpicsMoveRequest(
		stMotionCommand:=stMotionCommand[5],
		stMotionStatus:=stMotionStatus[5]
	);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// ----------- DuringMotion: Must not enable if interlock not met -------------
TEST(__POUNAME());
fbMoveRequest.MoveRequestCmds(
    HomeCmd    := FALSE,
    MoveCmd    := TRUE,
    MoveOk     := FALSE,
    EnableDone := TRUE,
    HomeMode   := E_EpicsHomeCmd.NONE,
    EnableMode := E_StageEnableMode.DURING_MOTION
);
fbMoveRequest();

AssertFalse(fbMoveRequest.Status.bEnable, 'Request disabled if MoveOk is FALSE in DURING_MOTION mode');
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="GivenDuringMotionEnableWhenInterlockTrue_Test5" Id="{7969e8d3-af6a-4127-ac6b-067095ece1fe}">
      <Declaration><![CDATA[METHOD PRIVATE GivenDuringMotionEnableWhenInterlockTrue_Test5
VAR_INST
    fbMoveRequest : FB_EpicsMoveRequest(
		stMotionCommand:=stMotionCommand[6],
		stMotionStatus:=stMotionStatus[6]
	);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

fbMoveRequest.MoveRequestCmds(
    HomeCmd    := FALSE,
    MoveCmd    := TRUE,
    MoveOk     := TRUE,
    EnableDone := TRUE,
    HomeMode   := E_EpicsHomeCmd.NONE,
    EnableMode := E_StageEnableMode.DURING_MOTION
);
fbMoveRequest();

AssertTrue(fbMoveRequest.Status.bEnable, 'Request enabled when MoveOk TRUE in DURING_MOTION mode');
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="GivenExecuteFlagsSetAndCleared_Test9" Id="{ccb731ad-7ae3-42c6-b7d0-4f8b032480bc}">
      <Declaration><![CDATA[METHOD PRIVATE GivenExecuteFlagsSetAndCleared_Test9
VAR_INST
    fbMoveRequest : FB_EpicsMoveRequest(
		stMotionCommand:=stMotionCommand[10],
		stMotionStatus:=stMotionStatus[10]
	);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// ----------- Execute flags set and cleared as expected -------------
TEST(__POUNAME());

	fbMoveRequest.MoveRequestCmds(
		HomeCmd    := FALSE,
		MoveCmd    := TRUE,
		MoveOk     := TRUE,
		EnableDone := TRUE,
		HomeMode   := E_EpicsHomeCmd.NONE,
		EnableMode := E_StageEnableMode.DURING_MOTION
	);
	fbMoveRequest();
	
	AssertTrue(THIS^.stMotionCommand[10].bExecute, 'bExecute must be set');
	AssertTrue(fbMoveRequest.Status.bExecute, 'Local execute flag must be set');
	
	// Simulate user reset/stop
	THIS^.stMotionCommand[10].bExecute := FALSE;
	fbMoveRequest();
	AssertTrue(fbMoveRequest.Status.bPrepareDisable, 'Request must prepare disable after clear');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="GivenHomeMoveCorrectFlags_Test7" Id="{d11d6fbe-9ad2-45a0-8486-135c6938164a}">
      <Declaration><![CDATA[METHOD PRIVATE GivenHomeMoveCorrectFlags_Test7
VAR_INST
    fbMoveRequest : FB_EpicsMoveRequest(
		stMotionCommand:=stMotionCommand[8],
		stMotionStatus:=stMotionStatus[8]
	);
	nActualMoveMode : INT;
	eExpectedMoveMode :E_EpicsMotorCmd := E_EpicsMotorCmd.HOME;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// ----------- Home Move Command: flags and mode correctness -------------
TEST(__POUNAME());

	fbMoveRequest.MoveRequestCmds(
		HomeCmd    := TRUE,
		MoveCmd    := FALSE,
		MoveOk     := TRUE,
		EnableDone := TRUE,
		HomeMode   := E_EpicsHomeCmd.LOW_LIMIT,
		EnableMode := E_StageEnableMode.DURING_MOTION
	);
	fbMoveRequest();
	
	nActualMoveMode := fbMoveRequest.Status.nCommand;
	AssertTrue(fbMoveRequest.Status.bNewMoveReq, 'Registered home request');
	AssertFalse(fbMoveRequest.Status.bExecMove, 'Should not be absolute for home');
	AssertTrue(fbMoveRequest.Status.bExecHome, 'Home move must be ready');
	AssertEquals_INT(eExpectedMoveMode, nActualMoveMode, 'Command=home');
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="GivenInitMoveRequestSetsBusyClearsDoneAndErrorMsg_Test8" Id="{353016d0-e3a7-463a-a4c1-92f73931e5e3}">
      <Declaration><![CDATA[METHOD PRIVATE GivenInitMoveRequestSetsBusyClearsDoneAndErrorMsg_Test8
VAR_INST
    fbMoveRequest : FB_EpicsMoveRequest(
		stMotionCommand:=stMotionCommand[9],
		stMotionStatus:=stMotionStatus[9]
	);
	sMoveMessage : STRING := '';
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// ----------- Init should set busy, clear done, clear error string -------------
TEST(__POUNAME());

	fbMoveRequest.MoveRequestCmds(
		HomeCmd    := FALSE,
		MoveCmd    := TRUE,
		MoveOk     := TRUE,
		EnableDone := TRUE,
		HomeMode   := E_EpicsHomeCmd.NONE,
		EnableMode := E_StageEnableMode.DURING_MOTION
	);

	fbMoveRequest.InitMoveRequest();
	fbMoveRequest();
	
	AssertTrue(stMotionStatus[9].bBusy, 'Busy at init');
	AssertFalse(stMotionStatus[9].bDone, 'Done reset at init');
	AssertEquals_STRING(sMoveMessage, stMotionStatus[9].sErrorMessage, 'Error cleared at init');
TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GivenMoveRequestAndInterlockAndErrorStatusUpdateRequestStatus_Test1" Id="{223fd37a-e346-4e63-ae91-95e8242641a5}">
      <Declaration><![CDATA[METHOD PRIVATE GivenMoveRequestAndInterlockAndErrorStatusUpdateRequestStatus_Test1
VAR_INST
    fbMoveRequest : FB_EpicsMoveRequest(stMotionCommand:=stMotionCommand[1], stMotionStatus:=stMotionStatus[1]);
    eExpectedMoveMode : INT := E_EpicsMotorCmd.MOVE_ABSOLUTE;
    eActualMoveMode : INT;
    sMoveMessage : STRING := '';
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

	// ------------------------
	// ALWAYS mode: request should only enable when allowed, and latch off on error
	// ------------------------
	fbMoveRequest.MoveRequestCmds(
		HomeCmd := FALSE,
		MoveCmd := FALSE,
		MoveOk := FALSE,
		EnableDone := FALSE,
		HomeMode := E_EpicsHomeCmd.NONE,
		EnableMode := E_StageEnableMode.ALWAYS
	);
	fbMoveRequest();
	
	AssertFalse(
		fbMoveRequest.Status.bEnable,
		'move request must be disabled with invalid interlock in ALWAYS mode #1'
	);
	
	fbMoveRequest.MoveRequestCmds(
		HomeCmd := FALSE,
		MoveCmd := TRUE,
		MoveOk := TRUE,
		EnableDone := TRUE,
		HomeMode := E_EpicsHomeCmd.NONE,
		EnableMode := E_StageEnableMode.ALWAYS
	);
	fbMoveRequest();
	
	AssertTrue(
		fbMoveRequest.Status.bEnable,
		'move request must be enabled with valid interlock in ALWAYS mode #2'
	);
	
	// Now simulate a persistent/latching error after enable
	fbMoveRequest.ClearMoveRequest();
	fbMoveRequest();
	
	stMotionstatus[1].bError := TRUE; // Simulate latching error
	fbMoveRequest.MoveRequestCmds(
		HomeCmd := FALSE,
		MoveCmd := TRUE,
		MoveOk := TRUE,
		EnableDone := TRUE,
		HomeMode := E_EpicsHomeCmd.NONE,
		EnableMode := E_StageEnableMode.ALWAYS
	);
	fbMoveRequest();
	
	AssertFalse(
		fbMoveRequest.Status.bEnable,
		'Latching error condition must disable move request in ALWAYS mode #3'
	);
	
	// ------------------------
	// DURING_MOTION mode: only enable when MoveOk, must stay off with error or missing enables
	// ------------------------
	// 
	// Clear previous request
	fbMoveRequest.ClearMoveRequest();
	fbMoveRequest.ClearMoveRequestErrors();
	fbMoveRequest();
	
	fbMoveRequest.MoveRequestCmds(
		HomeCmd := FALSE,
		MoveCmd := TRUE,
		MoveOk := FALSE,
		EnableDone := FALSE,
		HomeMode := E_EpicsHomeCmd.NONE,
		EnableMode := E_StageEnableMode.DURING_MOTION
	);
	fbMoveRequest();
	
	AssertFalse(
		fbMoveRequest.Status.bEnable,
		'Missing MoveOk must keep move disabled in DURING_MOTION mode #4'
	);
	
	fbMoveRequest.ClearMoveRequest();
	fbMoveRequest();
	
	fbMoveRequest.MoveRequestCmds(
		HomeCmd := FALSE,
		MoveCmd := TRUE,
		MoveOk := TRUE,
		EnableDone := FALSE,
		HomeMode := E_EpicsHomeCmd.NONE,
		EnableMode := E_StageEnableMode.DURING_MOTION
	);
	fbMoveRequest();
	
	AssertTrue(
		fbMoveRequest.Status.bEnable,
		'Move request must be enabled in DURING_MOTION mode #6'
	);
	
	fbMoveRequest.ClearMoveRequest();
	fbMoveRequest();
	
	fbMoveRequest.MoveRequestCmds(
		HomeCmd := FALSE,
		MoveCmd := TRUE,
		MoveOk := TRUE,
		EnableDone := TRUE,
		HomeMode := E_EpicsHomeCmd.NONE,
		EnableMode := E_StageEnableMode.DURING_MOTION
	);
	fbMoveRequest();
	
	eExpectedMoveMode := E_EpicsMotorCmd.MOVE_ABSOLUTE;
	
	AssertTrue(fbMoveRequest.Status.bNewMoveReq, 'Move request must be Registered #7');
	AssertTrue(fbMoveRequest.Status.bExecMove, 'Absolute move must be ready #8');
	AssertFalse(fbMoveRequest.Status.bExecHome, 'Move is not a Homing move #9');
	AssertEquals_INT(eExpectedMoveMode, fbMoveRequest.Status.nCommand, 'Move command must be absolute #10');
	
	fbMoveRequest.ClearMoveRequest();
	fbMoveRequest();
	
	fbMoveRequest.MoveRequestCmds(
		HomeCmd := TRUE,
		MoveCmd := FALSE,
		MoveOk := TRUE,
		EnableDone := TRUE,
		HomeMode := E_EpicsHomeCmd.LOW_LIMIT,
		EnableMode := E_StageEnableMode.DURING_MOTION
	);
	fbMoveRequest();
	
	eExpectedMoveMode := E_EpicsMotorCmd.HOME;
	eActualMoveMode := fbMoveRequest.Status.nCommand;
	
	AssertTrue(fbMoveRequest.Status.bNewMoveReq, 'Move request must be Registered #11');
	AssertFalse(fbMoveRequest.Status.bExecMove, 'Move is not Absolute #12');
	AssertTrue(fbMoveRequest.Status.bExecHome, 'Home move must be ready #13');
	AssertEquals_INT(eExpectedMoveMode, eActualMoveMode, 'Move command must be a valid homing mode #14');
	
	fbMoveRequest.ClearMoveRequest();
	fbMoveRequest();
	
	stMotionstatus[1].bError := FALSE;
	fbMoveRequest.MoveRequestCmds(
		HomeCmd := FALSE,
		MoveCmd := TRUE,
		MoveOk := TRUE,
		EnableDone := TRUE,
		HomeMode := E_EpicsHomeCmd.NONE,
		EnableMode := E_StageEnableMode.DURING_MOTION
	);
	fbMoveRequest.InitMoveRequest();
	fbMoveRequest();
	
	AssertTrue(stMotionstatus[1].bBusy, 'Move Request Busy flag must be set at init #15');
	AssertFalse(stMotionstatus[1].bDone, 'Move request Done flag must reset at init #16');
	AssertEquals_STRING(sMoveMessage, stMotionstatus[1].sErrorMessage, 'Move request Error flag must be cleared at init #17');
	
	fbMoveRequest.ClearMoveRequest();
	fbMoveRequest();
	
	stMotionstatus[1].bError := FALSE;
	fbMoveRequest.MoveRequestCmds(
		HomeCmd := FALSE,
		MoveCmd := TRUE,
		MoveOk := TRUE,
		EnableDone := TRUE,
		HomeMode := E_EpicsHomeCmd.NONE,
		EnableMode := E_StageEnableMode.DURING_MOTION
	);
	fbMoveRequest();
	
	AssertTrue(THIS^.stMotionCommand[1].bExecute, 'Execute must be set by now #18');
	AssertTrue(fbMoveRequest.Status.bExecute, 'Local Execute must be set by now #19');
	
	// Simulate user stop
	THIS^.stMotionCommand[1].bExecute := FALSE;
	fbMoveRequest();
	
	AssertTrue(fbMoveRequest.Status.bPrepareDisable, 'Must be preparing to disable by now #20');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="GivenMoveRequestDisabledWhenInterlockFalseAlwaysMode_Test2" Id="{dce5ee2e-35e2-4fcc-8c65-bcbb413a4167}">
      <Declaration><![CDATA[METHOD PRIVATE GivenMoveRequestDisabledWhenInterlockFalseAlwaysMode_Test2
VAR_INST
    fbMoveRequest : FB_EpicsMoveRequest(
		stMotionCommand:=stMotionCommand[3],
		stMotionStatus:=stMotionStatus[3]
	);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// ----------- Always mode: should NOT enable if interlock not met -------------
TEST(__POUNAME());
	
	fbMoveRequest.MoveRequestCmds(
		HomeCmd    := FALSE,
		MoveCmd    := FALSE,
		MoveOk     := FALSE,
		EnableDone := FALSE,
		HomeMode   := E_EpicsHomeCmd.NONE,
		EnableMode := E_StageEnableMode.ALWAYS
	);
	fbMoveRequest();
	
	AssertFalse(fbMoveRequest.Status.bEnable, 'Should be disabled if MoveOk is FALSE in ALWAYS mode');
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>