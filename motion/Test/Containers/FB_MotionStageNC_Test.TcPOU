<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_MotionStageNC_Test" Id="{43fc959c-4f0c-48e3-9ba7-5e5e5850d492}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK INTERNAL FB_MotionStageNC_Test EXTENDS FB_TestSuite
VAR

    fbMotionLogger : ARRAY[1..16] OF FB_MotionLogger;
    // Persistant storage
    fbPersistentDataStorage :  ARRAY[1..16] OF FB_PersistentDataStorage;
    stMotionEpicsInterface :  ARRAY[1..16] OF ST_MotionEpicsInterface;
 	fbAxisRef :   ARRAY[1..16] OF AXIS_REF;
 
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[GivenMoveCmdAndMoveOkIfResetThenAbortMove_Test1();
GivenMoveCmdAndMoveOkIfHaltThenAbortMove_Test2();
GivenMoveCmdAndMoveOkMoveToTarget1ThenTarget2_Test3();
GivenMoveCmdAndValidInterlocksThenMoveToTarget_Test4();
GivenMoveCmdValidInterlockAndWrongMotionParamsThenGotoErrorStateIfResetThenGotoInitState_Test5();
GivenMoveCmdAndMoveOkAndPositiveBacklashEnabledThenMoveToTargetWithCompensation_Test6();
GivenMoveCmdAndMoveOkAndNegativeBacklashEnabledThenMoveToTargetWithCompensation_Test7();
GivenHomeCmdAndAbsoluteSetAndMoveOkThenMoveToUserDefinedHomePosition_Test8();
GivenHomeCmdNoneAndMoveOkThenSetHomeFlag_Test9();
GivenHomeCmdLowLimitModeBackwardSwPulseMoveOkThenMoveToUserDefinedHomePosition_Test10();
GivenHomeCmdHighLimitModeForwardSwPulseMoveOkThenMoveToUserDefinedHomePosition_Test11();
GivenHomeCmdHomeViaLowModeHomeSwPulseMoveOkThenMoveToUserDefinedHomePosition_Test12();
GivenHomeCmdHomeViaHighModeHomeSwPulseMoveOkThenMoveToUserDefinedHomePosition_Test13();
GivenHomeCmdHomeViaHighModeForwardSwPulseBeforeHomeSwPulseThenMoveToUserDefinePosition_Test14();
GivenHomeCmdHomeViaLowModeBackwardSwPulseBeforeHomeSwPulseThenMoveToUserDefinePosition_Test15();
GivenHomeCmdLowLimitModeAndResetThenAbortHoming_Test16();]]></ST>
    </Implementation>
    <Method Name="GivenHomeCmdAndAbsoluteSetAndMoveOkThenMoveToUserDefinedHomePosition_Test8" Id="{253b6d82-c379-45a7-8590-f79f84a467f7}">
      <Declaration><![CDATA[METHOD PRIVATE GivenHomeCmdAndAbsoluteSetAndMoveOkThenMoveToUserDefinedHomePosition_Test8
VAR_INST
   fbMotionStage : FB_MotionStageNC(	sName := 'Test8',
                                        stMotionEpicsItf := stMotionEpicsInterface[8],
                                        AxisRef := fbAxisRef[8],
                                        iMotionLogger := fbMotionLogger[8],
                                        iPersistentDataStorage := fbPersistentDataStorage[8]
                                    ) := (	HardwareEnable:=TRUE, 
											UserEnable:=TRUE, 
											LimBackward := TRUE,
											LimForward:=TRUE,
											BrakeMode := E_StageBrakeMode.IF_MOVING, 
											EnableMode:=ENUM_StageEnableMode.DURING_MOTION, 
											HomeMode:=E_EpicsHomeCmd.ABSOLUTE_SET
									);
									
    fbTestTimer: TON := (IN:=TRUE, PT:=T#10S);
    nTestStep : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());


CASE nTestStep OF
    0:
		 stMotionEpicsInterface[8].fHomePosition := 20.0;
		 fbMotionStage.UserCmds(MoveCmd:=FALSE, HomeCmd:=TRUE);
		 nTestStep := nTestStep + 1;
	1:
		IF stMotionEpicsInterface[8].bDone THEN
			AssertTrue(Condition :=(stMotionEpicsInterface[8].fHomePosition -fbAxisRef[8].NcToPlc.ActPos) = 0, Message := 'Hone position not set #1');
			nTestStep := nTestStep + 1;
		END_IF	
END_CASE

fbTestTimer();
fbMotionStage();

IF nTestStep = 2 THEN

TEST_FINISHED();
ELSIF fbTestTimer.Q THEN
    AssertTrue(
        Condition := FALSE,
        Message := CONCAT('Timed out at step: ', TO_STRING(nTestStep))
    );
    TEST_FINISHED();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="GivenHomeCmdHighLimitModeForwardSwPulseMoveOkThenMoveToUserDefinedHomePosition_Test11" Id="{2af3aa63-2d5e-48a5-9af6-8662bf6f8644}">
      <Declaration><![CDATA[METHOD PRIVATE GivenHomeCmdHighLimitModeForwardSwPulseMoveOkThenMoveToUserDefinedHomePosition_Test11
VAR_INST
   fbMotionStage : FB_MotionStageNC(	sName := 'Test11',
                                        stMotionEpicsItf := stMotionEpicsInterface[11],
                                        AxisRef := fbAxisRef[11],
                                        iMotionLogger := fbMotionLogger[11],
                                        iPersistentDataStorage := fbPersistentDataStorage[11]
                                    ) := (	HardwareEnable:=TRUE, 
											UserEnable:=TRUE, 
											LimBackward := TRUE,
											LimForward:=TRUE,
											BrakeMode := E_StageBrakeMode.IF_MOVING, 
											EnableMode:=ENUM_StageEnableMode.DURING_MOTION, 
											HomeMode:=E_EpicsHomeCmd.HIGH_LIMIT
									);
									
    fbTestTimer: TON := (IN:=TRUE, PT:=T#10S);
    fbCamSwitchPulserSearch: TON := (IN:=TRUE, PT:=T#500MS);
    fbCamSwitchPulserSync: TON := (PT:=T#1000MS);
    nTestStep : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());


CASE nTestStep OF
    0:
		 stMotionEpicsInterface[11].fHomePosition := 20.0;
		 fbMotionStage.UserCmds(MoveCmd:=FALSE, HomeCmd:=TRUE);
		 nTestStep := nTestStep + 1;

    1:
        IF fbCamSwitchPulserSearch.Q THEN
            fbMotionStage.LimForward := FALSE;
            fbCamSwitchPulserSearch.IN := FALSE;
            fbCamSwitchPulserSync.IN := TRUE;
            nTestStep := nTestStep + 1;
        END_IF
    2:
        IF fbCamSwitchPulserSync.Q THEN
            fbMotionStage.LimForward := TRUE;
            nTestStep := nTestStep + 1;
        END_IF
    3:
        IF stMotionEpicsInterface[11].bDone THEN
            nTestStep := nTestStep + 1;
        END_IF
END_CASE

fbCamSwitchPulserSearch();
fbCamSwitchPulserSync();
fbTestTimer();
fbMotionStage();

IF nTestStep = 4 THEN
    AssertTrue(Condition:=fbAxisRef[11].Status.Homed, Message := 'Axis not calibrated #1');
    AssertEquals_LREAL ( Delta:=0.001, Expected:=stMotionEpicsInterface[11].fHomePosition, Actual:=fbAxisRef[11].NcToPlc.ActPos, Message:='Position is not the expected #2');
    TEST_FINISHED();
ELSIF fbTestTimer.Q THEN
    AssertTrue(
        Condition := FALSE,
        Message := CONCAT('Timed out at step: ', TO_STRING(nTestStep))
    );

    TEST_FINISHED();
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GivenHomeCmdHomeViaHighModeForwardSwPulseBeforeHomeSwPulseThenMoveToUserDefinePosition_Test14" Id="{bef29b72-04d6-4825-b7ae-27502091b8b5}">
      <Declaration><![CDATA[METHOD PRIVATE GivenHomeCmdHomeViaHighModeForwardSwPulseBeforeHomeSwPulseThenMoveToUserDefinePosition_Test14
VAR_INST
   fbMotionStage : FB_MotionStageNC(	sName := 'Test14',
                                        stMotionEpicsItf := stMotionEpicsInterface[14],
                                        AxisRef := fbAxisRef[14],
                                        iMotionLogger := fbMotionLogger[14],
                                        iPersistentDataStorage := fbPersistentDataStorage[14]
                                    ) := (	HardwareEnable:=TRUE, 
											UserEnable:=TRUE, 
											LimBackward := TRUE,
											LimForward:=TRUE,
											BrakeMode := E_StageBrakeMode.IF_MOVING, 
											EnableMode:=ENUM_StageEnableMode.DURING_MOTION, 
											HomeMode:=E_EpicsHomeCmd.HOME_VIA_HIGH
									);
									
    fbTestTimer: TON := (IN:=TRUE, PT:=T#10S);
    fbCamSwitchPulserSearch: TON := (IN:=TRUE, PT:=T#500MS);
    fbCamSwitchPulserSync: TON := (PT:=T#1000MS);
    nTestStep : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

CASE nTestStep OF
    0:
		 stMotionEpicsInterface[14].fHomePosition := 6.2;
		 fbMotionStage.UserCmds(MoveCmd:=FALSE, HomeCmd:=TRUE);
		 nTestStep := nTestStep + 1;
    1:
        IF fbCamSwitchPulserSearch.Q THEN
            fbMotionStage.LimForward := FALSE;
            fbCamSwitchPulserSearch.IN := FALSE;
            fbCamSwitchPulserSync.IN := TRUE;
            nTestStep := nTestStep + 1;
        END_IF
    2:
        IF fbCamSwitchPulserSync.Q THEN
            fbMotionStage.LimForward := TRUE;
            nTestStep := nTestStep + 1;
        END_IF
    3:
        IF fbMotionStage.bLimHomeDone THEN
            // prepare second stage homing
            fbCamSwitchPulserSearch.IN := TRUE;
            fbCamSwitchPulserSync.IN := FALSE;
            nTestStep := nTestStep + 1;
        END_IF
    4:
        IF fbCamSwitchPulserSearch.Q THEN
            fbMotionStage.LimHome := TRUE;
            fbCamSwitchPulserSearch.IN := FALSE;
            fbCamSwitchPulserSync.IN := TRUE;
            nTestStep := nTestStep + 1;
        END_IF
    5:
        IF fbCamSwitchPulserSync.Q THEN
            fbMotionStage.LimHome := FALSE;
            nTestStep := nTestStep + 1;
        END_IF
    6:
        IF stMotionEpicsInterface[14].bDone THEN
            nTestStep := nTestStep + 1;
        END_IF
END_CASE

fbCamSwitchPulserSearch();
fbCamSwitchPulserSync();
fbTestTimer();
fbMotionStage();

IF nTestStep = 7 THEN
    AssertTrue(Condition:=fbAxisRef[14].Status.Homed, Message := 'Axis not calibrated #1');
    AssertEquals_LREAL ( Delta:=0.001, Expected:=stMotionEpicsInterface[14].fHomePosition, Actual:=fbAxisRef[14].NcToPlc.ActPos, Message:='Position is not the expected #2');
    TEST_FINISHED();
ELSIF fbTestTimer.Q THEN
    AssertTrue(
        Condition := FALSE,
        Message := CONCAT('Timed out at step: ', TO_STRING(nTestStep))
    );

    TEST_FINISHED();
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GivenHomeCmdHomeViaHighModeHomeSwPulseMoveOkThenMoveToUserDefinedHomePosition_Test13" Id="{501bb430-c4c8-4962-b9b7-05487279548f}">
      <Declaration><![CDATA[METHOD PRIVATE GivenHomeCmdHomeViaHighModeHomeSwPulseMoveOkThenMoveToUserDefinedHomePosition_Test13
VAR_INST
   fbMotionStage : FB_MotionStageNC(	sName := 'Test13',
                                        stMotionEpicsItf := stMotionEpicsInterface[13],
                                        AxisRef := fbAxisRef[13],
                                        iMotionLogger := fbMotionLogger[13],
                                        iPersistentDataStorage := fbPersistentDataStorage[13]
                                    ) := (	HardwareEnable:=TRUE, 
											UserEnable:=TRUE, 
											LimBackward := TRUE,
											LimForward:=TRUE,
											BrakeMode := E_StageBrakeMode.IF_MOVING, 
											EnableMode:=ENUM_StageEnableMode.DURING_MOTION, 
											HomeMode:=E_EpicsHomeCmd.HOME_VIA_HIGH
									);
									
    fbTestTimer: TON := (IN:=TRUE, PT:=T#10S);
    fbCamSwitchPulserSearch: TON := (IN:=TRUE, PT:=T#500MS);
    fbCamSwitchPulserSync: TON := (PT:=T#1000MS);
    nTestStep : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());


CASE nTestStep OF
    0:
		 stMotionEpicsInterface[13].fHomePosition := 5.55;
		 fbMotionStage.UserCmds(MoveCmd:=FALSE, HomeCmd:=TRUE);
		 nTestStep := nTestStep + 1;

    1:
        IF fbCamSwitchPulserSearch.Q THEN
            fbMotionStage.LimHome := TRUE;
            fbCamSwitchPulserSearch.IN := FALSE;
            fbCamSwitchPulserSync.IN := TRUE;
            nTestStep := nTestStep + 1;
        END_IF
    2:
        IF fbCamSwitchPulserSync.Q THEN
            fbMotionStage.LimHome := FALSE;
            nTestStep := nTestStep + 1;
        END_IF
    3:
        IF stMotionEpicsInterface[13].bDone THEN
            nTestStep := nTestStep + 1;
        END_IF
END_CASE

fbCamSwitchPulserSearch();
fbCamSwitchPulserSync();
fbTestTimer();
fbMotionStage();

IF nTestStep = 4 THEN
    AssertTrue(Condition:=fbAxisRef[13].Status.Homed, Message := 'Axis not calibrated #1');
    AssertEquals_LREAL ( Delta:=0.001, Expected:=stMotionEpicsInterface[13].fHomePosition, Actual:=fbAxisRef[13].NcToPlc.ActPos, Message:='Position is not the expected #2');
    TEST_FINISHED();
ELSIF fbTestTimer.Q THEN
    AssertTrue(
        Condition := FALSE,
        Message := CONCAT('Timed out at step: ', TO_STRING(nTestStep))
    );

    TEST_FINISHED();
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GivenHomeCmdHomeViaLowModeBackwardSwPulseBeforeHomeSwPulseThenMoveToUserDefinePosition_Test15" Id="{f5542e4e-2910-481a-85ce-1a7f0cb0b943}">
      <Declaration><![CDATA[METHOD PRIVATE GivenHomeCmdHomeViaLowModeBackwardSwPulseBeforeHomeSwPulseThenMoveToUserDefinePosition_Test15
VAR_INST
   fbMotionStage : FB_MotionStageNC(	sName := 'Test15',
                                        stMotionEpicsItf := stMotionEpicsInterface[15],
                                        AxisRef := fbAxisRef[15],
                                        iMotionLogger := fbMotionLogger[15],
                                        iPersistentDataStorage := fbPersistentDataStorage[15]
                                    ) := (	HardwareEnable:=TRUE, 
											UserEnable:=TRUE, 
											LimBackward := TRUE,
											LimForward:=TRUE,
											BrakeMode := E_StageBrakeMode.IF_MOVING, 
											EnableMode:=ENUM_StageEnableMode.DURING_MOTION, 
											HomeMode:=E_EpicsHomeCmd.HOME_VIA_LOW
									);
									
    fbTestTimer: TON := (IN:=TRUE, PT:=T#10S);
    fbCamSwitchPulserSearch: TON := (IN:=TRUE, PT:=T#500MS);
    fbCamSwitchPulserSync: TON := (PT:=T#1000MS);
    nTestStep : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

CASE nTestStep OF
    0:
		 stMotionEpicsInterface[15].fHomePosition := 8.2;
		 fbMotionStage.UserCmds(MoveCmd:=FALSE, HomeCmd:=TRUE);
		 nTestStep := nTestStep + 1;
    1:
        IF fbCamSwitchPulserSearch.Q THEN
            fbMotionStage.LimBackward := FALSE;
            fbCamSwitchPulserSearch.IN := FALSE;
            fbCamSwitchPulserSync.IN := TRUE;
            nTestStep := nTestStep + 1;
        END_IF
    2:
        IF fbCamSwitchPulserSync.Q THEN
            fbMotionStage.LimBackward := TRUE;
            nTestStep := nTestStep + 1;
        END_IF
    3:
        IF fbMotionStage.bLimHomeDone THEN
            // prepare second stage homing
            fbCamSwitchPulserSearch.IN := TRUE;
            fbCamSwitchPulserSync.IN := FALSE;
            nTestStep := nTestStep + 1;
        END_IF
    4:
        IF fbCamSwitchPulserSearch.Q THEN
            fbMotionStage.LimHome := TRUE;
            fbCamSwitchPulserSearch.IN := FALSE;
            fbCamSwitchPulserSync.IN := TRUE;
            nTestStep := nTestStep + 1;
        END_IF
    5:
        IF fbCamSwitchPulserSync.Q THEN
            fbMotionStage.LimHome := FALSE;
            nTestStep := nTestStep + 1;
        END_IF
    6:
        IF stMotionEpicsInterface[15].bDone THEN
            nTestStep := nTestStep + 1;
        END_IF
END_CASE

fbCamSwitchPulserSearch();
fbCamSwitchPulserSync();
fbTestTimer();
fbMotionStage();

IF nTestStep = 7 THEN
    AssertTrue(Condition:=fbAxisRef[15].Status.Homed, Message := 'Axis not calibrated #1');
    AssertEquals_LREAL ( Delta:=0.001, Expected:=stMotionEpicsInterface[15].fHomePosition, Actual:=fbAxisRef[15].NcToPlc.ActPos, Message:='Position is not the expected #2');
    TEST_FINISHED();
ELSIF fbTestTimer.Q THEN
    AssertTrue(
        Condition := FALSE,
        Message := CONCAT('Timed out at step: ', TO_STRING(nTestStep))
    );

    TEST_FINISHED();
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GivenHomeCmdHomeViaLowModeHomeSwPulseMoveOkThenMoveToUserDefinedHomePosition_Test12" Id="{0f21ff56-ff7d-42d6-8a7e-507573fd24aa}">
      <Declaration><![CDATA[METHOD PRIVATE GivenHomeCmdHomeViaLowModeHomeSwPulseMoveOkThenMoveToUserDefinedHomePosition_Test12
VAR_INST
   fbMotionStage : FB_MotionStageNC(	sName := 'Test12',
                                        stMotionEpicsItf := stMotionEpicsInterface[12],
                                        AxisRef := fbAxisRef[12],
                                        iMotionLogger := fbMotionLogger[12],
                                        iPersistentDataStorage := fbPersistentDataStorage[12]
                                    ) := (	HardwareEnable:=TRUE, 
											UserEnable:=TRUE, 
											LimBackward := TRUE,
											LimForward:=TRUE,
											BrakeMode := E_StageBrakeMode.IF_MOVING, 
											EnableMode:=ENUM_StageEnableMode.DURING_MOTION, 
											HomeMode:=E_EpicsHomeCmd.HOME_VIA_LOW
									);
									
    fbTestTimer: TON := (IN:=TRUE, PT:=T#10S);
    fbCamSwitchPulserSearch: TON := (IN:=TRUE, PT:=T#500MS);
    fbCamSwitchPulserSync: TON := (PT:=T#1000MS);
    nTestStep : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());


CASE nTestStep OF
    0:
		 stMotionEpicsInterface[12].fHomePosition := 10.0;
		 fbMotionStage.UserCmds(MoveCmd:=FALSE, HomeCmd:=TRUE);
		 nTestStep := nTestStep + 1;

    1:
        IF fbCamSwitchPulserSearch.Q THEN
            fbMotionStage.LimHome := TRUE;
            fbCamSwitchPulserSearch.IN := FALSE;
            fbCamSwitchPulserSync.IN := TRUE;
            nTestStep := nTestStep + 1;
        END_IF
    2:
        IF fbCamSwitchPulserSync.Q THEN
            fbMotionStage.LimHome := FALSE;
            nTestStep := nTestStep + 1;
        END_IF
    3:
        IF stMotionEpicsInterface[12].bDone THEN
            nTestStep := nTestStep + 1;
        END_IF
END_CASE

fbCamSwitchPulserSearch();
fbCamSwitchPulserSync();
fbTestTimer();
fbMotionStage();

IF nTestStep = 4 THEN
    AssertTrue(Condition:=fbAxisRef[12].Status.Homed, Message := 'Axis not calibrated #1');
    AssertEquals_LREAL ( Delta:=0.001, Expected:=stMotionEpicsInterface[12].fHomePosition, Actual:=fbAxisRef[12].NcToPlc.ActPos, Message:='Position is not the expected #2');
    TEST_FINISHED();
ELSIF fbTestTimer.Q THEN
    AssertTrue(
        Condition := FALSE,
        Message := CONCAT('Timed out at step: ', TO_STRING(nTestStep))
    );

    TEST_FINISHED();
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GivenHomeCmdLowLimitModeAndResetThenAbortHoming_Test16" Id="{fb1ff3e0-5234-4117-b553-a90d648343f0}">
      <Declaration><![CDATA[METHOD PRIVATE GivenHomeCmdLowLimitModeAndResetThenAbortHoming_Test16
VAR_INST
   fbMotionStage : FB_MotionStageNC(	sName := 'Test16',
                                        stMotionEpicsItf := stMotionEpicsInterface[16],
                                        AxisRef := fbAxisRef[16],
                                        iMotionLogger := fbMotionLogger[16],
                                        iPersistentDataStorage := fbPersistentDataStorage[16]
                                    ) := (	HardwareEnable:=TRUE, 
											UserEnable:=TRUE, 
											LimBackward := TRUE,
											LimForward:=TRUE,
											BrakeMode := E_StageBrakeMode.IF_MOVING, 
											EnableMode:=ENUM_StageEnableMode.DURING_MOTION, 
											HomeMode:=E_EpicsHomeCmd.LOW_LIMIT
									);
									
    fbTestTimer: TON := (IN:=TRUE, PT:=T#16S);
    fbResetTimer: TON := (IN:=TRUE, PT:=T#500MS);
    nTestStep : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());


CASE nTestStep OF
    0:
		 stMotionEpicsInterface[16].fHomePosition := 20.0;
		 fbMotionStage.UserCmds(MoveCmd:=FALSE, HomeCmd:=TRUE);
		 nTestStep := nTestStep + 1;

    1:
        IF fbResetTimer.Q THEN
            stMotionEpicsInterface[16].bReset := TRUE;
            fbResetTimer.IN := FALSE;
            nTestStep := nTestStep + 1;
        END_IF
    2:
		// resetting a homing sequence will set mc_home into error state
        IF stMotionEpicsInterface[16].bError THEN
            nTestStep := nTestStep + 1;
        END_IF
END_CASE

fbResetTimer();
fbTestTimer();
fbMotionStage();

IF nTestStep = 3 THEN
    AssertTrue(
        Condition := (fbMotionStage.eDriveState=E_MoveState.ERROR),
        Message :='Drive must be in Error State #1');
    TEST_FINISHED();
ELSIF fbTestTimer.Q THEN
    AssertTrue(
        Condition := FALSE,
        Message := CONCAT('Timed out at step: ', TO_STRING(nTestStep))
    );

    TEST_FINISHED();
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GivenHomeCmdLowLimitModeBackwardSwPulseMoveOkThenMoveToUserDefinedHomePosition_Test10" Id="{38063202-adc8-4d3e-8e4a-d284a88ae9ab}">
      <Declaration><![CDATA[METHOD PRIVATE GivenHomeCmdLowLimitModeBackwardSwPulseMoveOkThenMoveToUserDefinedHomePosition_Test10
VAR_INST
   fbMotionStage : FB_MotionStageNC(	sName := 'Test10',
                                        stMotionEpicsItf := stMotionEpicsInterface[10],
                                        AxisRef := fbAxisRef[10],
                                        iMotionLogger := fbMotionLogger[10],
                                        iPersistentDataStorage := fbPersistentDataStorage[10]
                                    ) := (	HardwareEnable:=TRUE, 
											UserEnable:=TRUE, 
											LimBackward := TRUE,
											LimForward:=TRUE,
											BrakeMode := E_StageBrakeMode.IF_MOVING, 
											EnableMode:=ENUM_StageEnableMode.DURING_MOTION, 
											HomeMode:=E_EpicsHomeCmd.LOW_LIMIT
									);
									
    fbTestTimer: TON := (IN:=TRUE, PT:=T#10S);
    fbCamSwitchPulserSearch: TON := (IN:=TRUE, PT:=T#500MS);
    fbCamSwitchPulserSync: TON := (PT:=T#1000MS);
    nTestStep : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());


CASE nTestStep OF
    0:
		 stMotionEpicsInterface[10].fHomePosition := 20.0;
		 fbMotionStage.UserCmds(MoveCmd:=FALSE, HomeCmd:=TRUE);
		 nTestStep := nTestStep + 1;

    1:
        IF fbCamSwitchPulserSearch.Q THEN
            fbMotionStage.LimBackward := FALSE;
            fbCamSwitchPulserSearch.IN := FALSE;
            fbCamSwitchPulserSync.IN := TRUE;
            nTestStep := nTestStep + 1;
        END_IF
    2:
        IF fbCamSwitchPulserSync.Q THEN
            fbMotionStage.LimBackward := TRUE;
            nTestStep := nTestStep + 1;
        END_IF
    3:
        IF stMotionEpicsInterface[10].bDone THEN
            nTestStep := nTestStep + 1;
        END_IF
END_CASE

fbCamSwitchPulserSearch();
fbCamSwitchPulserSync();
fbTestTimer();
fbMotionStage();

IF nTestStep = 4 THEN
    AssertTrue(Condition:=fbAxisRef[10].Status.Homed, Message := 'Axis not calibrated #1');
    AssertEquals_LREAL ( Delta:=0.001, Expected:=stMotionEpicsInterface[10].fHomePosition, Actual:=fbAxisRef[10].NcToPlc.ActPos, Message:='Position is not the expected #2');
    TEST_FINISHED();
ELSIF fbTestTimer.Q THEN
    AssertTrue(
        Condition := FALSE,
        Message := CONCAT('Timed out at step: ', TO_STRING(nTestStep))
    );

    TEST_FINISHED();
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GivenHomeCmdNoneAndMoveOkThenSetHomeFlag_Test9" Id="{d4ce9a28-0d09-43a0-9439-db832b2656b8}">
      <Declaration><![CDATA[METHOD PRIVATE GivenHomeCmdNoneAndMoveOkThenSetHomeFlag_Test9
VAR_INST
   fbMotionStage : FB_MotionStageNC(	sName := 'Test9',
                                        stMotionEpicsItf := stMotionEpicsInterface[9],
                                        AxisRef := fbAxisRef[9],
                                        iMotionLogger := fbMotionLogger[9],
                                        iPersistentDataStorage := fbPersistentDataStorage[9]
                                    ) := (	HardwareEnable:=TRUE, 
											UserEnable:=TRUE, 
											LimBackward := TRUE,
											LimForward:=TRUE,
											BrakeMode := E_StageBrakeMode.IF_MOVING, 
											EnableMode:=ENUM_StageEnableMode.DURING_MOTION, 
											HomeMode:=E_EpicsHomeCmd.NONE
									);
									
    fbTestTimer: TON := (IN:=TRUE, PT:=T#3S);
    nTestStep : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());


CASE nTestStep OF
    0:
		 fbMotionStage.UserCmds(MoveCmd:=FALSE, HomeCmd:=TRUE);
		 nTestStep := nTestStep + 1;
	1:
		IF stMotionEpicsInterface[9].stAxisStatus.bHomed THEN
			nTestStep := nTestStep + 1;
		END_IF	
END_CASE

fbTestTimer();
fbMotionStage();

IF nTestStep = 2 THEN

TEST_FINISHED();
ELSIF fbTestTimer.Q THEN
    AssertTrue(
        Condition := FALSE,
        Message := CONCAT('Timed out at step: ', TO_STRING(nTestStep))
    );
    TEST_FINISHED();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="GivenMoveCmdAndMoveOkAndNegativeBacklashEnabledThenMoveToTargetWithCompensation_Test7" Id="{2b0e18de-bb60-4f66-8435-2821190f306d}">
      <Declaration><![CDATA[METHOD PRIVATE GivenMoveCmdAndMoveOkAndNegativeBacklashEnabledThenMoveToTargetWithCompensation_Test7
VAR_INST
   fbMotionStage : FB_MotionStageNC(	sName := 'Test6',
                                        stMotionEpicsItf := stMotionEpicsInterface[7],
                                        AxisRef := fbAxisRef[7],
                                        iMotionLogger := fbMotionLogger[7],
                                        iPersistentDataStorage := fbPersistentDataStorage[7]
                                    ) := (	HardwareEnable:=TRUE, 
											UserEnable:=TRUE, 
											LimBackward := TRUE,
											LimForward:=TRUE,
											BrakeMode := E_StageBrakeMode.IF_MOVING, 
											EnableMode:=ENUM_StageEnableMode.DURING_MOTION, 
											HomeMode:=E_EpicsHomeCmd.ABSOLUTE_SET
									);
									
    fbTestTimer: TON := (IN:=TRUE, PT:=T#10S);
    nTestStep : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());


CASE nTestStep OF
    0:
		fbMotionStage.EnableBacklashCompensation(UserEnable:=TRUE, Compensation:=-2.5);
		nTestStep := nTestStep + 1;
	1:
		// init backlash free absolute move.
		 stMotionEpicsInterface[7].fPosition := 40.0;
		 stMotionEpicsInterface[7].fVelocity := 50.0;
		 stMotionEpicsInterface[7].fAcceleration := 100.0;
		 stMotionEpicsInterface[7].fDeceleration := 100.0;
		 fbMotionStage.UserCmds(MoveCmd:=TRUE, HomeCmd:=FALSE);
		 nTestStep := nTestStep + 1;
	2:
		IF stMotionEpicsInterface[7].bDone THEN
			AssertTrue(Condition :=(stMotionEpicsInterface[7].fPosition-fbAxisRef[7].NcToPlc.ActPos) = 0, Message := 'Target position not reached #1');
			AssertTrue(Condition :=((fbAxisRef[7].NcToPlc.ActPos-fbAxisRef[7].NcToPlc.ActPosWithoutPosCorrection) = 0), Message := 'No compensation in this direction #2');
			nTestStep := nTestStep + 1;
		END_IF
    3:
		// reverse.
		stMotionEpicsInterface[7].fPosition := 80.0;
		stMotionEpicsInterface[7].fVelocity := 50.0;
		stMotionEpicsInterface[7].fAcceleration := 200.0;
		stMotionEpicsInterface[7].fDeceleration := 200.0;
		fbMotionStage.UserCmds(MoveCmd:=TRUE, HomeCmd:=FALSE);
		nTestStep := nTestStep + 1;
    4:
         IF stMotionEpicsInterface[7].bDone THEN
			AssertTrue(Condition :=(stMotionEpicsInterface[7].fPosition-fbAxisRef[7].NcToPlc.ActPos) = 0, Message := 'Target position not reached #3');
			AssertTrue(Condition :=((fbAxisRef[7].NcToPlc.ActPos-fbAxisRef[7].NcToPlc.ActPosWithoutPosCorrection) = 2.5), Message := 'This move must have a 2.5 compensation #4');            
			nTestStep := nTestStep + 1;
        END_IF
	5:
		fbMotionStage.EnableBacklashCompensation(UserEnable:=TRUE, Compensation:=0);	
		nTestStep := nTestStep + 1;
	6:
		stMotionEpicsInterface[7].fPosition := 120.0;
		stMotionEpicsInterface[7].fVelocity := 50.0;
		stMotionEpicsInterface[7].fAcceleration := 200.0;
		stMotionEpicsInterface[7].fDeceleration := 200.0;
		fbMotionStage.UserCmds(MoveCmd:=TRUE, HomeCmd:=FALSE);
		nTestStep := nTestStep + 1;
	7:
		IF stMotionEpicsInterface[7].bDone THEN
			AssertTrue(Condition :=(stMotionEpicsInterface[7].fPosition-fbAxisRef[7].NcToPlc.ActPos) = 0, Message := 'Target position not reached #5');
			AssertTrue(Condition :=((fbAxisRef[7].NcToPlc.ActPos-fbAxisRef[7].NcToPlc.ActPosWithoutPosCorrection) = 0), Message := 'Actual compensation must tbe 0 #6');
			nTestStep := nTestStep + 1;
		END_IF
	8:
		fbMotionStage.EnableBacklashCompensation(UserEnable:=TRUE, Compensation:=-3.5);	
		nTestStep := nTestStep + 1;
	9:
		stMotionEpicsInterface[7].fPosition := 160.0;
		stMotionEpicsInterface[7].fVelocity := 50.0;
		stMotionEpicsInterface[7].fAcceleration := 200.0;
		stMotionEpicsInterface[7].fDeceleration := 200.0;
		fbMotionStage.UserCmds(MoveCmd:=TRUE, HomeCmd:=FALSE);
		nTestStep := nTestStep + 1;
	10:
         IF stMotionEpicsInterface[7].bDone THEN
			AssertTrue(Condition :=(stMotionEpicsInterface[7].fPosition-fbAxisRef[7].NcToPlc.ActPos) = 0, Message := 'Target position not reached #7');
			AssertTrue(Condition :=((fbAxisRef[7].NcToPlc.ActPos-fbAxisRef[7].NcToPlc.ActPosWithoutPosCorrection) = 3.5), Message := 'This move must have a 3.5 compensation #8');            
			nTestStep := nTestStep + 1;
        END_IF
	11:
		fbMotionStage.EnableBacklashCompensation(UserEnable:=FALSE, Compensation:=-3.5);	
		nTestStep := nTestStep + 1;
	12:
		stMotionEpicsInterface[7].fPosition := 180.0;
		stMotionEpicsInterface[7].fVelocity := 50.0;
		stMotionEpicsInterface[7].fAcceleration := 200.0;
		stMotionEpicsInterface[7].fDeceleration := 200.0;
		fbMotionStage.UserCmds(MoveCmd:=TRUE, HomeCmd:=FALSE);
		nTestStep := nTestStep + 1;
	13:
         IF stMotionEpicsInterface[7].bDone THEN
			AssertTrue(Condition :=(stMotionEpicsInterface[7].fPosition-fbAxisRef[7].NcToPlc.ActPos) = 0, Message := 'Target position not reached #9');
			AssertTrue(Condition :=((fbAxisRef[7].NcToPlc.ActPos-fbAxisRef[7].NcToPlc.ActPosWithoutPosCorrection) = 0), Message := 'This move is not compensated #10');            
			nTestStep := nTestStep + 1;
        END_IF
END_CASE

fbTestTimer();
fbMotionStage();

IF nTestStep = 14 THEN

	TEST_FINISHED();
ELSIF fbTestTimer.Q THEN
    AssertTrue(
        Condition := FALSE,
        Message := CONCAT('Timed out at step: ', TO_STRING(nTestStep))
    );
    TEST_FINISHED();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="GivenMoveCmdAndMoveOkAndPositiveBacklashEnabledThenMoveToTargetWithCompensation_Test6" Id="{eacd47ff-5090-4d4e-8c56-5ace2594f75c}">
      <Declaration><![CDATA[METHOD PRIVATE GivenMoveCmdAndMoveOkAndPositiveBacklashEnabledThenMoveToTargetWithCompensation_Test6
VAR_INST
   fbMotionStage : FB_MotionStageNC(	sName := 'Test6',
                                        stMotionEpicsItf := stMotionEpicsInterface[6],
                                        AxisRef := fbAxisRef[6],
                                        iMotionLogger := fbMotionLogger[6],
                                        iPersistentDataStorage := fbPersistentDataStorage[6]
                                    ) := (	HardwareEnable:=TRUE, 
											UserEnable:=TRUE, 
											LimBackward := TRUE,
											LimForward:=TRUE,
											BrakeMode := E_StageBrakeMode.IF_MOVING, 
											EnableMode:=ENUM_StageEnableMode.DURING_MOTION, 
											HomeMode:=E_EpicsHomeCmd.ABSOLUTE_SET
									);
									
    fbTestTimer: TON := (IN:=TRUE, PT:=T#8S);
    nTestStep : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());


CASE nTestStep OF
    0:
		fbMotionStage.EnableBacklashCompensation(UserEnable:=TRUE, Compensation:=2.5);
		 nTestStep := nTestStep + 1;
	1:
		// init backlash free absolute move.
		 stMotionEpicsInterface[6].fPosition := 150.0;
		 stMotionEpicsInterface[6].fVelocity := 50.0;
		 stMotionEpicsInterface[6].fAcceleration := 100.0;
		 stMotionEpicsInterface[6].fDeceleration := 100.0;
		 fbMotionStage.UserCmds(MoveCmd:=TRUE, HomeCmd:=FALSE);
		 nTestStep := nTestStep + 1;
	2:
		IF stMotionEpicsInterface[6].bDone THEN
			AssertTrue(Condition :=(stMotionEpicsInterface[6].fPosition-fbAxisRef[6].NcToPlc.ActPos) = 0, Message := 'Target position not reached #1');
			AssertTrue(Condition :=((fbAxisRef[6].NcToPlc.ActPos-fbAxisRef[6].NcToPlc.ActPosWithoutPosCorrection) = 0), Message := 'No compensation in this direction #2');
			nTestStep := nTestStep + 1;
		END_IF
    3:
		// reverse.
		stMotionEpicsInterface[6].fPosition := 100.0;
		stMotionEpicsInterface[6].fVelocity := 50.0;
		stMotionEpicsInterface[6].fAcceleration := 200.0;
		stMotionEpicsInterface[6].fDeceleration := 200.0;
		fbMotionStage.UserCmds(MoveCmd:=TRUE, HomeCmd:=FALSE);
		nTestStep := nTestStep + 1;
    4:
         IF stMotionEpicsInterface[6].bDone THEN
			AssertTrue(Condition :=(stMotionEpicsInterface[6].fPosition-fbAxisRef[6].NcToPlc.ActPos) = 0, Message := 'Target position not reached #3');
			AssertTrue(Condition :=((fbAxisRef[6].NcToPlc.ActPos-fbAxisRef[6].NcToPlc.ActPosWithoutPosCorrection) = 2.5), Message := 'This move must have a 2.5 compensation #4');            
			nTestStep := nTestStep + 1;
        END_IF
	5:
		fbMotionStage.EnableBacklashCompensation(UserEnable:=TRUE, Compensation:=0);	
		nTestStep := nTestStep + 1;
	6:
		stMotionEpicsInterface[6].fPosition := 60.0;
		stMotionEpicsInterface[6].fVelocity := 50.0;
		stMotionEpicsInterface[6].fAcceleration := 200.0;
		stMotionEpicsInterface[6].fDeceleration := 200.0;
		fbMotionStage.UserCmds(MoveCmd:=TRUE, HomeCmd:=FALSE);
		nTestStep := nTestStep + 1;
	7:
		IF stMotionEpicsInterface[6].bDone THEN
			AssertTrue(Condition :=(stMotionEpicsInterface[6].fPosition-fbAxisRef[6].NcToPlc.ActPos) = 0, Message := 'Target position not reached #5');
			AssertTrue(Condition :=((fbAxisRef[6].NcToPlc.ActPos-fbAxisRef[6].NcToPlc.ActPosWithoutPosCorrection) = 0), Message := 'Actual compensation must tbe 0 #6');
			nTestStep := nTestStep + 1;
		END_IF
	8:
		fbMotionStage.EnableBacklashCompensation(UserEnable:=TRUE, Compensation:=3.5);	
		nTestStep := nTestStep + 1;
	9:
		stMotionEpicsInterface[6].fPosition := 40.0;
		stMotionEpicsInterface[6].fVelocity := 50.0;
		stMotionEpicsInterface[6].fAcceleration := 200.0;
		stMotionEpicsInterface[6].fDeceleration := 200.0;
		fbMotionStage.UserCmds(MoveCmd:=TRUE, HomeCmd:=FALSE);
		nTestStep := nTestStep + 1;
	10:
         IF stMotionEpicsInterface[6].bDone THEN
			AssertTrue(Condition :=(stMotionEpicsInterface[6].fPosition-fbAxisRef[6].NcToPlc.ActPos) = 0, Message := 'Target position not reached #7');
			AssertTrue(Condition :=((fbAxisRef[6].NcToPlc.ActPos-fbAxisRef[6].NcToPlc.ActPosWithoutPosCorrection) = 3.5), Message := 'This move must have a 3.5 compensation #8');            
			nTestStep := nTestStep + 1;
        END_IF
	11:
		fbMotionStage.EnableBacklashCompensation(UserEnable:=FALSE, Compensation:=0.5);	
		nTestStep := nTestStep + 1;
	12:
		stMotionEpicsInterface[6].fPosition := 20.0;
		stMotionEpicsInterface[6].fVelocity := 50.0;
		stMotionEpicsInterface[6].fAcceleration := 200.0;
		stMotionEpicsInterface[6].fDeceleration := 200.0;
		fbMotionStage.UserCmds(MoveCmd:=TRUE, HomeCmd:=FALSE);
		nTestStep := nTestStep + 1;
	13:
         IF stMotionEpicsInterface[6].bDone THEN
			AssertTrue(Condition :=(stMotionEpicsInterface[6].fPosition-fbAxisRef[6].NcToPlc.ActPos) = 0, Message := 'Target position not reached #9');
			AssertTrue(Condition :=((fbAxisRef[6].NcToPlc.ActPos-fbAxisRef[6].NcToPlc.ActPosWithoutPosCorrection) = 0), Message := 'This move is not compensated #10');            
			nTestStep := nTestStep + 1;
        END_IF
END_CASE

fbTestTimer();
fbMotionStage();

IF nTestStep = 11 THEN

	TEST_FINISHED();
ELSIF fbTestTimer.Q THEN
    AssertTrue(
        Condition := FALSE,
        Message := CONCAT('Timed out at step: ', TO_STRING(nTestStep))
    );
    TEST_FINISHED();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="GivenMoveCmdAndMoveOkIfHaltThenAbortMove_Test2" Id="{8f4d1144-cd7b-4793-a403-1f7069d03b65}">
      <Declaration><![CDATA[METHOD PRIVATE GivenMoveCmdAndMoveOkIfHaltThenAbortMove_Test2
VAR_INST
   fbMotionStage : FB_MotionStageNC(	sName := 'Test2',
                                        stMotionEpicsItf := stMotionEpicsInterface[2],
                                        AxisRef := fbAxisRef[2],
                                        iMotionLogger := fbMotionLogger[2],
                                        iPersistentDataStorage := fbPersistentDataStorage[2]
                                    ) := (	HardwareEnable:=TRUE, 
											UserEnable:=TRUE, 
											LimBackward := TRUE,
											LimForward:=TRUE,
											BrakeMode := E_StageBrakeMode.IF_MOVING, 
											EnableMode:=ENUM_StageEnableMode.DURING_MOTION, 
											HomeMode:=E_EpicsHomeCmd.ABSOLUTE_SET
									);
									
    fbTestTimer: TON := (IN:=TRUE, PT:=T#3S);
    fbAbsoluteMoveTimer: TON := (PT:=T#50MS);
    nTestStep : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

fbMotionStage();
CASE nTestStep OF
    0:
		IF fbMotionStage.bInterlocksError THEN
			AssertTrue(Condition :=  stMotionEpicsInterface[2].bError, Message := 'Interlock error must be raised #2');
			AssertEquals_UDINT ( Expected:= stMotionEpicsInterface[2].nErrorId, Actual:=11, Message:='Interlock error code is 11 #3');		
		END_IF
		nTestStep := nTestStep + 1;
    1:
		fbMotionStage.UserEnable := TRUE;
		fbMotionStage.HardwareEnable := TRUE;
		stMotionEpicsInterface[2].bReset := TRUE;
		nTestStep := nTestStep + 1;
	2:
		IF fbMotionStage.bAbortDone THEN
			AssertFalse(Condition :=  stMotionEpicsInterface[2].bError, Message := 'Error must cleared #4');
			AssertEquals_UDINT ( Expected:= stMotionEpicsInterface[2].nErrorId, Actual:=0, Message:='error ID must 0 #5');
			nTestStep := nTestStep + 1;	
		END_IF
	
	3:
		// init backlash free absolute move.
		 stMotionEpicsInterface[2].fPosition := 100.0;
		 stMotionEpicsInterface[2].fVelocity := 50.0;
		 stMotionEpicsInterface[2].fAcceleration := 500.0;
		 stMotionEpicsInterface[2].fDeceleration := 500.0;
		 fbMotionStage.UserCmds(MoveCmd:=TRUE, HomeCmd:=FALSE);
		 fbAbsoluteMoveTimer.IN:=TRUE;
		 nTestStep := nTestStep + 1;
	4:
		IF stMotionEpicsInterface[2].stAxisStatus.bExecute THEN
			AssertTrue(Condition := fbMotionStage.bDriveWatchDogStatus, Message := 'WatchDog set #6');
			AssertTrue(Condition := stMotionEpicsInterface[2].bBusy, Message := 'This request must be in process #7');	
			nTestStep := nTestStep + 1;
		END_IF

	5:
		IF fbAbsoluteMoveTimer.Q THEN
			stMotionEpicsInterface[2].bExecute := FALSE;
			fbAbsoluteMoveTimer.IN:=FALSE;
			nTestStep := nTestStep + 1;
		END_IF
	6:
		IF stMotionEpicsInterface[2].bDone THEN
			AssertTrue(Condition := fbMotionStage.bAborted, Message := 'Move must be aborted #8');
			AssertFalse(Condition :=stMotionEpicsInterface[2].bBusy, Message := 'Move request must be canceled #9');
			AssertFalse(Condition :=stMotionEpicsInterface[2].bExecute, Message := 'Move request must cleared #10');
			nTestStep := nTestStep + 1;
		END_IF	
END_CASE

fbTestTimer();
fbAbsoluteMoveTimer();
 
IF nTestStep = 7 THEN

TEST_FINISHED();
ELSIF fbTestTimer.Q THEN
    AssertTrue(
        Condition := FALSE,
        Message := CONCAT('Timed out at step: ', TO_STRING(nTestStep))
    );
    TEST_FINISHED();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="GivenMoveCmdAndMoveOkIfResetThenAbortMove_Test1" Id="{65f1b0b0-0c30-4329-b7d2-5d137b5808f7}">
      <Declaration><![CDATA[METHOD PRIVATE GivenMoveCmdAndMoveOkIfResetThenAbortMove_Test1
VAR_INST
   fbMotionStage : FB_MotionStageNC(	sName := 'TEST1',
                                        stMotionEpicsItf := stMotionEpicsInterface[1],
                                        AxisRef := fbAxisRef[1],
                                        iMotionLogger := fbMotionLogger[1],
                                        iPersistentDataStorage := fbPersistentDataStorage[1]
                                    ) := (	HardwareEnable:=FALSE, 
											UserEnable:=FALSE, 
											LimBackward := TRUE,
											LimForward:=TRUE,
											BrakeMode := E_StageBrakeMode.IF_MOVING, 
											EnableMode:=ENUM_StageEnableMode.DURING_MOTION, 
											HomeMode:=E_EpicsHomeCmd.ABSOLUTE_SET
									);
									
    fbTestTimer: TON := (IN:=TRUE, PT:=T#3S);
    fbAbsoluteMoveTimer: TON := (PT:=T#50MS);
    nTestStep : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

fbMotionStage();
CASE nTestStep OF
    0:
		IF fbMotionStage.bInterlocksError THEN
			AssertTrue(Condition :=  stMotionEpicsInterface[1].bError, Message := 'Interlock error must be raised #2');
			AssertEquals_UDINT ( Expected:= stMotionEpicsInterface[1].nErrorId, Actual:=11, Message:='Interlock error code is 11 #3');		
		END_IF
		nTestStep := nTestStep + 1;
    1:
		fbMotionStage.UserEnable := TRUE;
		fbMotionStage.HardwareEnable := TRUE;
		stMotionEpicsInterface[1].bReset := TRUE;
		nTestStep := nTestStep + 1;
	2:
		IF fbMotionStage.bAbortDone THEN
			AssertFalse(Condition :=  stMotionEpicsInterface[1].bError, Message := 'Error must cleared #4');
			AssertEquals_UDINT ( Expected:= stMotionEpicsInterface[1].nErrorId, Actual:=0, Message:='error ID must 0 #5');
			nTestStep := nTestStep + 1;	
		END_IF
	
	3:
		// init backlash free absolute move.
		 stMotionEpicsInterface[1].fPosition := 100.0;
		 stMotionEpicsInterface[1].fVelocity := 50.0;
		 stMotionEpicsInterface[1].fAcceleration := 500.0;
		 stMotionEpicsInterface[1].fDeceleration := 500.0;
		 fbMotionStage.UserCmds(MoveCmd:=TRUE, HomeCmd:=FALSE);
		 fbAbsoluteMoveTimer.IN:=TRUE;
		 nTestStep := nTestStep + 1;
	4:
		IF stMotionEpicsInterface[1].stAxisStatus.bExecute THEN
			AssertTrue(Condition := fbMotionStage.bDriveWatchDogStatus, Message := 'WatchDog set #6');
			AssertTrue(Condition := stMotionEpicsInterface[1].bBusy, Message := 'This request must be in process #7');	
			nTestStep := nTestStep + 1;
		END_IF

	5:
		IF fbAbsoluteMoveTimer.Q THEN
			stMotionEpicsInterface[1].bReset := TRUE;
			fbAbsoluteMoveTimer.IN:=FALSE;
			nTestStep := nTestStep + 1;
		END_IF
	6:
		IF stMotionEpicsInterface[1].bDone THEN
			AssertTrue(Condition := fbMotionStage.bAborted, Message := 'Move must be aborted #8');
			AssertFalse(Condition :=stMotionEpicsInterface[1].bBusy, Message := 'Move request must be canceled #9');
			AssertFalse(Condition :=stMotionEpicsInterface[1].bExecute, Message := 'Move request must cleared #10');
			nTestStep := nTestStep + 1;
		END_IF	
END_CASE

fbTestTimer();
fbAbsoluteMoveTimer();
 
IF nTestStep = 7 THEN

TEST_FINISHED();
ELSIF fbTestTimer.Q THEN
    AssertTrue(
        Condition := FALSE,
        Message := CONCAT('Timed out at step: ', TO_STRING(nTestStep))
    );
    TEST_FINISHED();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="GivenMoveCmdAndMoveOkMoveToTarget1ThenTarget2_Test3" Id="{440f6e54-0647-423b-b13a-da4723a87f92}">
      <Declaration><![CDATA[METHOD PRIVATE GivenMoveCmdAndMoveOkMoveToTarget1ThenTarget2_Test3
VAR_INST
   fbMotionStage : FB_MotionStageNC(	sName := 'Test5',
                                        stMotionEpicsItf := stMotionEpicsInterface[3],
                                        AxisRef := fbAxisRef[3],
                                        iMotionLogger := fbMotionLogger[3],
                                        iPersistentDataStorage := fbPersistentDataStorage[3]
                                    ) := (	HardwareEnable:=TRUE, 
											UserEnable:=TRUE, 
											LimBackward := TRUE,
											LimForward:=TRUE,
											BrakeMode := E_StageBrakeMode.IF_MOVING, 
											EnableMode:=ENUM_StageEnableMode.DURING_MOTION, 
											HomeMode:=E_EpicsHomeCmd.ABSOLUTE_SET
									);
									
    fbTestTimer: TON := (IN:=TRUE, PT:=T#10S);
    nTestStep : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());


CASE nTestStep OF
    0:
		// init backlash free absolute move.
		 stMotionEpicsInterface[3].fPosition := 100.0;
		 stMotionEpicsInterface[3].fVelocity := 50.0;
		 stMotionEpicsInterface[3].fAcceleration := 100.0;
		 stMotionEpicsInterface[3].fDeceleration := 100.0;
		 fbMotionStage.UserCmds(MoveCmd:=TRUE, HomeCmd:=FALSE);
		 nTestStep := nTestStep + 1;
	1:
		IF stMotionEpicsInterface[3].stAxisStatus.bExecute THEN
			AssertTrue(Condition := fbMotionStage.bDriveWatchDogStatus, Message := 'WatchDog set #1');
			AssertTrue(Condition := stMotionEpicsInterface[3].bBusy, Message := 'This request must be in process #2');	
			nTestStep := nTestStep + 1;
		END_IF
	2:
		IF stMotionEpicsInterface[3].bDone THEN
			AssertTrue(Condition :=(stMotionEpicsInterface[3].fPosition-fbAxisRef[3].NcToPlc.ActPos) = 0, Message := 'Target position not reached #3');
			nTestStep := nTestStep + 1;
		END_IF
    3:
		// init backlash free absolute move.
		stMotionEpicsInterface[3].fPosition := 320.0;
		stMotionEpicsInterface[3].fVelocity := 50.0;
		stMotionEpicsInterface[3].fAcceleration := 200.0;
		stMotionEpicsInterface[3].fDeceleration := 200.0;
		fbMotionStage.UserCmds(MoveCmd:=TRUE, HomeCmd:=FALSE);
		nTestStep := nTestStep + 1;
    4:
        IF stMotionEpicsInterface[3].bDone THEN
			AssertTrue(Condition :=(stMotionEpicsInterface[3].fPosition-fbAxisRef[3].NcToPlc.ActPos) = 0, Message := 'Target position not reached #4');
            nTestStep := nTestStep + 1;
        END_IF	
END_CASE

fbTestTimer();
fbMotionStage();

IF nTestStep = 5 THEN
	TEST_FINISHED();
ELSIF fbTestTimer.Q THEN
    AssertTrue( Condition := FALSE, Message := CONCAT('Timed out at step: ', TO_STRING(nTestStep)));
    TEST_FINISHED();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="GivenMoveCmdAndValidInterlocksThenMoveToTarget_Test4" Id="{cdd9f552-1db5-4431-b2af-97cd2a62ee74}">
      <Declaration><![CDATA[METHOD PRIVATE GivenMoveCmdAndValidInterlocksThenMoveToTarget_Test4
VAR_INST
   fbMotionStage : FB_MotionStageNC(	sName := 'Test4',
                                        stMotionEpicsItf := stMotionEpicsInterface[4],
                                        AxisRef := fbAxisRef[4],
                                        iMotionLogger := fbMotionLogger[4],
                                        iPersistentDataStorage := fbPersistentDataStorage[4]
                                    ) := (	HardwareEnable:=TRUE, 
											UserEnable:=TRUE, 
											LimBackward := TRUE,
											LimForward:=TRUE,
											BrakeMode := E_StageBrakeMode.IF_MOVING, 
											EnableMode:=ENUM_StageEnableMode.DURING_MOTION, 
											HomeMode:=E_EpicsHomeCmd.ABSOLUTE_SET
									);
									
    fbTestTimer: TON := (IN:=TRUE, PT:=T#3S);
    nTestStep : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

fbMotionStage();
CASE nTestStep OF
    0:
		// init backlash free absolute move.
		 stMotionEpicsInterface[4].fPosition := 100.0;
		 stMotionEpicsInterface[4].fVelocity := 50.0;
		 stMotionEpicsInterface[4].fAcceleration := 500.0;
		 stMotionEpicsInterface[4].fDeceleration := 500.0;
		 fbMotionStage.UserCmds(MoveCmd:=TRUE, HomeCmd:=FALSE);
		 nTestStep := nTestStep + 1;
	1:
		IF stMotionEpicsInterface[4].stAxisStatus.bExecute THEN
			AssertTrue(Condition := fbMotionStage.bDriveWatchDogStatus, Message := 'WatchDog set #1');
			AssertTrue(Condition := stMotionEpicsInterface[4].bBusy, Message := 'This request must be in process #2');	
			nTestStep := nTestStep + 1;
		END_IF
	2:
		IF stMotionEpicsInterface[4].bDone THEN
			AssertFalse(Condition := fbMotionStage.bAborted, Message := 'Move must be aborted #3');
			AssertFalse(Condition :=stMotionEpicsInterface[4].bBusy, Message := 'Move request must be canceled #4');
			AssertTrue(Condition :=(stMotionEpicsInterface[4].fPosition-fbAxisRef[4].NcToPlc.ActPos) = 0, Message := 'Target position not reached #5');
			AssertFalse(Condition :=stMotionEpicsInterface[4].bEnable, Message := 'Move request must cleared #6');
			nTestStep := nTestStep + 1;
		END_IF	
END_CASE

fbTestTimer();
 
IF nTestStep = 3 THEN

TEST_FINISHED();
ELSIF fbTestTimer.Q THEN
    AssertTrue(
        Condition := FALSE,
        Message := CONCAT('Timed out at step: ', TO_STRING(nTestStep))
    );
    TEST_FINISHED();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="GivenMoveCmdValidInterlockAndWrongMotionParamsThenGotoErrorStateIfResetThenGotoInitState_Test5" Id="{2569c164-e1b3-4f42-94dc-e83db426a5c4}">
      <Declaration><![CDATA[METHOD PRIVATE GivenMoveCmdValidInterlockAndWrongMotionParamsThenGotoErrorStateIfResetThenGotoInitState_Test5
VAR_INST
   fbMotionStage : FB_MotionStageNC(	sName := 'Test3',
                                        stMotionEpicsItf := stMotionEpicsInterface[5],
                                        AxisRef := fbAxisRef[5],
                                        iMotionLogger := fbMotionLogger[5],
                                        iPersistentDataStorage := fbPersistentDataStorage[5]
                                    ) := (	HardwareEnable:=TRUE, 
											UserEnable:=TRUE, 
											LimBackward := TRUE,
											LimForward:=TRUE,
											BrakeMode := E_StageBrakeMode.IF_MOVING, 
											EnableMode:=ENUM_StageEnableMode.DURING_MOTION, 
											HomeMode:=E_EpicsHomeCmd.ABSOLUTE_SET
									);
									
    fbTestTimer: TON := (IN:=TRUE, PT:=T#3S);
    fbAbsoluteMoveTimer: TON := (PT:=T#50MS);
    nTestStep : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

CASE nTestStep OF
    0:
		// init backlash free absolute move.
		 stMotionEpicsInterface[5].fPosition := 100.0;
		 stMotionEpicsInterface[5].fVelocity := 0.0;
		 stMotionEpicsInterface[5].fAcceleration := 500.0;
		 stMotionEpicsInterface[5].fDeceleration := 500.0;
		 fbMotionStage.UserCmds(MoveCmd:=TRUE, HomeCmd:=FALSE);
		 nTestStep := nTestStep + 1;
	1:
		IF stMotionEpicsInterface[5].stAxisStatus.bExecute THEN
			AssertTrue(Condition := fbMotionStage.bDriveWatchDogStatus, Message := 'WatchDog set #1');
			AssertTrue(Condition := stMotionEpicsInterface[5].bBusy, Message := 'This request must be in process #2');	
			nTestStep := nTestStep + 1;
		END_IF

	2:
		IF stMotionEpicsInterface[5].bError THEN
			AssertTrue(Condition := (fbMotionStage.eDriveState=E_MoveState.ERROR), Message := 'Drive must be in Error state #3');
			nTestStep := nTestStep + 1;
		END_IF
	3:;
	
END_CASE

fbTestTimer();
fbAbsoluteMoveTimer();
fbMotionStage();

IF nTestStep = 3 THEN

TEST_FINISHED();
ELSIF fbTestTimer.Q THEN
    AssertTrue(
        Condition := FALSE,
        Message := CONCAT('Timed out at step: ', TO_STRING(nTestStep))
    );
    TEST_FINISHED();
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>