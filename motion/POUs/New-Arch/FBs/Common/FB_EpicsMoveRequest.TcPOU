<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_EpicsMoveRequest" Id="{f9713c0b-09a1-45a0-9fc6-342a7422cfa5}" SpecialFunc="None">
    <Declaration><![CDATA[(*Implements MoveRequest interface for EPICS Motor*)
FUNCTION_BLOCK FB_EpicsMoveRequest IMPLEMENTS I_MoveRequest
VAR
   // EPICS Interface
    {attribute 'no_copy'}
    stMotionCommand : REFERENCE TO ST_MotionCommand;
	{attribute 'no_copy'}
	stMotionStatus:  REFERENCE TO ST_MotionStatus;
	
    eEnableMode: E_StageEnableMode:=E_StageEnableMode.DURING_MOTION;
    {attribute 'hide'}
    eHomeMode	: E_EpicsHomeCmd := E_EpicsHomeCmd.NONE;
    {attribute 'hide'}
    bEnableDone : BOOL;
    {attribute 'hide'}
    bMoveOk: BOOL;
    (* non epics*)
    {attribute 'hide'}
    bExecute : BOOL;
    {attribute 'hide'}
    rtMoveCmdShortcut: R_TRIG;
    {attribute 'hide'}
    rtHomeCmdShortcut: R_TRIG;
    {attribute 'hide'}
    rtEnableMode: R_TRIG;
    {attribute 'hide'}
    rtNewMoveReq: R_TRIG;
    {attribute 'hide'}
    rtUserExec: R_TRIG;
    {attribute 'hide'}
    rtExec : R_TRIG;
    {attribute 'hide'}
    stMotionRequestStatus : ST_MoveRequestStatus;
    {attribute 'hide'}
    ftStopExec: F_TRIG;
    {attribute 'hide'}
    eRestoreSettingsState : ( RestoreSettingWaiting:=0, RestoreSettingDone:=1);
	rtExecute : R_TRIG;
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[// --- Validate command and status references ---
IF NOT __ISVALIDREF(stMotionCommand) OR NOT __ISVALIDREF(stMotionStatus) THEN
   RETURN;
END_IF

// --- Handle PLC shortcut commands (testing/circumvention logic) ---
rtMoveCmdShortcut(CLK := stMotionCommand.bMoveCmd);
rtHomeCmdShortcut(CLK := stMotionCommand.bHomeCmd);

// --- Rising edge of move command: issue MOVE_ABSOLUTE ---
IF rtMoveCmdShortcut.Q AND NOT stMotionCommand.bExecute THEN
    stMotionCommand.bExecute := TRUE;
    stMotionCommand.nCommand := E_EpicsMotorCmd.MOVE_ABSOLUTE;

// --- Rising edge of home command: validate and set HOME mode ---
ELSIF rtHomeCmdShortcut.Q AND NOT stMotionCommand.bExecute THEN
    IF IsValidHomeCmd(stMotionCommand.nCmdData) THEN
        IF stMotionCommand.nCmdData = E_EpicsHomeCmd.NONE THEN
            stMotionCommand.bExecute := FALSE; // Do not execute
        ELSE
            stMotionCommand.bExecute := TRUE;  // Valid home: enable
        END_IF
        stMotionCommand.nCommand := E_EpicsMotorCmd.HOME;
    END_IF
END_IF

// --- User/EPICS main exec entry ---
rtUserExec(CLK := stMotionCommand.bExecute);

// --- New move request: rising edge, axis not busy, no error, and interlocks OK ---
stMotionRequestStatus.bNewMoveReq S= NOT stMotionStatus.bBusy AND rtUserExec.Q AND NOT stMotionStatus.bError AND bMoveOk;

// --- New move stays active until execute ends or error occurs ---
stMotionRequestStatus.bNewMoveReq R= NOT stMotionCommand.bExecute OR stMotionStatus.bError;

// --- Prepare disable on end of move ---
stMotionRequestStatus.bPrepareDisable R= stMotionRequestStatus.bNewMoveReq;
rtNewMoveReq(CLK := stMotionRequestStatus.bNewMoveReq);

// --- Latch command data/type at queue entry, and check homing prerequisites ---
IF rtUserExec.Q THEN
    stMotionRequestStatus.nCmdData := stMotionCommand.nCmdData;
    stMotionRequestStatus.nCommand := stMotionCommand.nCommand;
    IF NOT stMotionCommand.bHomeCmd THEN
        IF eHomeMode <> E_EpicsHomeCmd.NONE AND NOT stMotionStatus.bHomed THEN
            stMotionStatus.sErrorMessage := 'Axis homing mode set, but homing routine pending';
        END_IF
    END_IF
END_IF

// --- Enable logic based on requested enable mode ---
rtEnableMode(CLK := (eEnableMode = E_StageEnableMode.DURING_MOTION));
CASE eEnableMode OF
    E_StageEnableMode.ALWAYS:
        stMotionRequestStatus.bEnable := NOT stMotionStatus.bError AND bMoveOk;
    E_StageEnableMode.DURING_MOTION:
        IF rtEnableMode.Q THEN
            stMotionRequestStatus.bEnable := FALSE; // DuringMotion disables enable on falling edge
        END_IF
        IF rtNewMoveReq.Q THEN
            stMotionRequestStatus.bEnable S= stMotionRequestStatus.bNewMoveReq;
        END_IF
END_CASE

// --- Execute if: not error, Execute set, and axis ready ---
stMotionRequestStatus.bExecute := NOT stMotionStatus.bError AND stMotionCommand.bExecute AND bEnableDone;
stMotionRequestStatus.bExecHome := stMotionRequestStatus.bExecute AND stMotionRequestStatus.nCommand = E_EpicsMotorCmd.HOME;
stMotionRequestStatus.bExecMove := stMotionRequestStatus.bExecute AND NOT stMotionRequestStatus.bExecHome;

// --- Latch axis busy at execute (clear done, busy, error) ---
rtExecute(CLK := stMotionCommand.bExecute);
IF rtExecute.Q THEN
    InitMoveRequest();
END_IF

// --- Clear local/EPICS interface --- 
stMotionCommand.bMoveCmd := FALSE;
stMotionCommand.bHomeCmd := FALSE;

// --- Prepare to disable at the end of execution (on falling edge) ---
ftStopExec(CLK := stMotionCommand.bExecute);
stMotionRequestStatus.bPrepareDisable S= (eEnableMode = E_StageEnableMode.DURING_MOTION) AND ftStopExec.Q;

// --- Reset error message on busy; optional: else show string on error condition ---
IF stMotionStatus.bBusy THEN
    stMotionStatus.sErrorMessage := '';
END_IF]]></ST>
    </Implementation>
    <Method Name="CallAfterInit" Id="{c5f4a41a-2a36-4ec0-b020-e8f39761af26}">
      <Declaration><![CDATA[METHOD PUBLIC CallAfterInit
VAR_INPUT
    stMotionCommand : REFERENCE TO ST_MotionCommand;
	stMotionStatus:  REFERENCE TO ST_MotionStatus;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.stMotionCommand REF=stMotionCommand;
THIS^.stMotionStatus REF=stMotionStatus;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ClearMoveRequest" Id="{fc3a5981-a4d7-4a2d-bb30-c09c583c9e55}">
      <Declaration><![CDATA[METHOD ClearMoveRequest

]]></Declaration>
      <Implementation>
        <ST><![CDATA[// falling edge here when target is reached, move halted
stMotionCommand.bExecute := FALSE;
stMotionStatus.bDone := FALSE;
stMotionStatus.bBusy := FALSE;
// release the cmds
stMotionCommand.bHomeCmd:=FALSE;
stMotionCommand.bMoveCmd:=FALSE;


]]></ST>
      </Implementation>
    </Method>
    <Method Name="ClearMoveRequestErrors" Id="{2bb41509-e70c-4465-a06c-a29812268b06}">
      <Declaration><![CDATA[METHOD ClearMoveRequestErrors
]]></Declaration>
      <Implementation>
        <ST><![CDATA[stMotionStatus.bError := FALSE;
stMotionStatus.nErrorId := 0;
stMotionStatus.sErrorMessage := '';
stMotionRequestStatus.bExecute := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="EnableMode" Id="{9356bd40-5ede-4c8b-b065-3ca414d58ac7}">
      <Declaration><![CDATA[PROPERTY EnableMode : ENUM_StageEnableMode
]]></Declaration>
      <Get Name="Get" Id="{0f06a9c5-786f-4b36-9ffb-1932b02bcacd}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[EnableMode := eEnableMode;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{21b092e9-96af-46ee-9d8d-c77dcd117d11}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[eEnableMode := EnableMode;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="FB_Init" Id="{9133e91c-1e17-4b3b-aa68-c9be539e6510}">
      <Declaration><![CDATA[//FB_Init is always available implicitly and it is used primarily for initialization.
//The return value is not evaluated. For a specific influence, you can also declare the
//methods explicitly and provide additional code there with the standard initialization
//code. You can evaluate the return value.
METHOD FB_Init: BOOL
VAR_INPUT
    bInitRetains: BOOL; // TRUE: the retain variables are initialized (reset warm / reset cold)
    bInCopyCode: BOOL;  // TRUE: the instance will be copied to the copy code afterward (online change)
    stMotionCommand : REFERENCE TO ST_MotionCommand;
	stMotionStatus:  REFERENCE TO ST_MotionStatus;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.stMotionCommand REF=stMotionCommand;
THIS^.stMotionStatus REF=stMotionStatus;]]></ST>
      </Implementation>
    </Method>
    <Method Name="HaltMoveRequest" Id="{71c9e391-cb0d-4362-ab43-3cfd1f6c0962}">
      <Declaration><![CDATA[METHOD HaltMoveRequest : BOOL
VAR_INPUT
    Busy	: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// // Halt is always a user stop but not an interlock event or a reset.
// ftstop(CLK:=stMotionCommand.bExecute);
// HaltMoveRequest := NOT stMotionCommand.bReset AND ftstop.Q
//                         AND ((Busy AND (stMotionRequestStatus.nCommand=10))
//                         OR (Busy AND (stMotionRequestStatus.nCommand=3)));
]]></ST>
      </Implementation>
    </Method>
    <Method Name="InitMoveRequest" Id="{2d590fc6-f95b-45d5-9e1d-141474a0f09b}">
      <Declaration><![CDATA[METHOD InitMoveRequest
]]></Declaration>
      <Implementation>
        <ST><![CDATA[stMotionStatus.bBusy := TRUE;
stMotionStatus.bDone := FALSE;
// reset error flag
stMotionStatus.sErrorMessage := '';]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsValidHomeCmd" Id="{ee32dcd3-ada0-4e13-b5c7-6e8287ec8a3c}">
      <Declaration><![CDATA[METHOD IsValidHomeCmd : BOOL
VAR_INPUT
    CmdData : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE CmdData OF
    E_EpicsHomeCmd.LOW_LIMIT,
    E_EpicsHomeCmd.HIGH_LIMIT,
    E_EpicsHomeCmd.HOME_VIA_LOW,
    E_EpicsHomeCmd.HOME_VIA_HIGH,
    E_EpicsHomeCmd.ABSOLUTE_SET,
    E_EpicsHomeCmd.AUTOZERO,
    E_EpicsHomeCmd.CURRENT_POSITION_METHOD,
    E_EpicsHomeCmd.NONE:
        IsValidHomeCmd := TRUE;
    ELSE
        IsValidHomeCmd := FALSE;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveRequest" Id="{664b6655-0949-47c1-b45f-a64c7d0cda3b}">
      <Declaration><![CDATA[METHOD MoveRequest
VAR_INPUT
    // From Axis through the drive
    EnableDone	: BOOL;
    // From Interlock through the drive
    MoveOk  : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.bMoveOk := MoveOk;
THIS^.bEnableDone := EnableDone;

]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveRequestCmds" Id="{d84ff316-c87c-445b-b337-4ae6bc661e04}">
      <Declaration><![CDATA[(*Internal use only purpose*)
METHOD INTERNAL MoveRequestCmds
VAR_INPUT
    (* From Drive*)
    HomeCmd		: BOOL;
    MoveCmd		: BOOL;
	MoveOk 		: BOOL;
	EnableDone  : BOOL;
    HomeMode	: INT := E_EpicsHomeCmd.NONE;
    EnableMode	: E_StageEnableMode :=  E_StageEnableMode.DURING_MOTION;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.stMotionCommand.bHomeCmd := HomeCmd;
THIS^.stMotionCommand.nCmdData := HomeMode;
THIS^.stMotionCommand.bMoveCmd	:= MoveCmd;
THIS^.bMoveOk := MoveOk;
THIS^.bEnableDone := EnableDone;
THIS^.eEnableMode := EnableMode;]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveRequestCompleted" Id="{29932e68-9af9-4521-bd55-b747e571b46c}">
      <Declaration><![CDATA[METHOD MoveRequestCompleted
VAR_INPUT
    MoveDone : BOOL;
    HomeDone : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[stMotionStatus.bHomed := HomeDone;
ClearMoveRequest();
MoveRequestDone(Done:=MoveDone OR HomeDone);

]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveRequestDone" Id="{ab10537f-2bb4-4a28-9c3a-e3028ea8d9fc}">
      <Declaration><![CDATA[METHOD MoveRequestDone
VAR_INPUT
    Done : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[stMotionStatus.bDone := Done;]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveRequestError" Id="{674719eb-75b4-4cc3-924b-ecc3d1af31ff}">
      <Declaration><![CDATA[METHOD MoveRequestError
VAR_INPUT
    Error :BOOL;
    ErrorId :UDINT;
    ErrorMessage:T_MAXSTRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[stMotionStatus.bError := Error;
stMotionStatus.nErrorId := ErrorId;
stMotionStatus.sErrorMessage:= ErrorMessage;

IF Error THEN
	ClearMoveRequest();
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveResetDone" Id="{f2401880-c9b3-4971-9d2e-b338ef5fea0a}">
      <Declaration><![CDATA[METHOD MoveResetDone
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.stMotionCommand.bReset := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ResetMoveEnable" Id="{f28760d0-5752-4bf4-b850-362b1de6a659}">
      <Declaration><![CDATA[METHOD ResetMoveEnable : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF stMotionRequestStatus.bPrepareDisable THEN
    IF THIS^.eEnableMode=E_StageEnableMode.DURING_MOTION THEN
        THIS^.stMotionRequestStatus.bEnable := FALSE;
		ResetMoveEnable := TRUE;
	ELSE
		ResetMoveEnable := FALSE;
    END_IF
    THIS^.stMotionRequestStatus.bPrepareDisable := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="ResetMoveRequest" Id="{90fe06b0-aa4b-458a-9f0e-28628dab07b6}">
      <Declaration><![CDATA[METHOD ResetMoveRequest
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="RestoreSettings" Id="{08281416-55cb-4b9c-81b3-3cf6fd0d7faf}">
      <Declaration><![CDATA[METHOD RestoreSettings
VAR_INPUT
    RestoreDone : BOOL;
    SavedPosition : LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// no needed in production since the actual position is already set on the axis
// and epics status will get that last position
// use this to restore anything thats not an axisref paramter.

CASE eRestoreSettingsState OF
    RestoreSettingWaiting:
        IF RestoreDone THEN
            THIS^.stMotionCommand.fPosition := SavedPosition;
            eRestoreSettingsState := RestoreSettingDone;
        END_IF
    RestoreSettingDone:;

END_CASE]]></ST>
      </Implementation>
    </Method>
    <Property Name="RestoreSettingsState" Id="{b366cb5d-502b-43b3-8623-320516670b00}">
      <Declaration><![CDATA[PROPERTY INTERNAL RestoreSettingsState : UINT]]></Declaration>
      <Get Name="Get" Id="{a39741db-d8b0-422d-b3ab-4a4dba01333b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[//RestoreSettingsState := eRestoreSettingsState;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Status" Id="{f678d159-cc5d-41ad-889c-5f951c755b6f}">
      <Declaration><![CDATA[PROPERTY Status : REFERENCE TO ST_MoveRequestStatus
]]></Declaration>
      <Get Name="Get" Id="{08876ea6-b526-4166-bd4c-0a2aa1b11215}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Status REF= stMotionRequestStatus;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>