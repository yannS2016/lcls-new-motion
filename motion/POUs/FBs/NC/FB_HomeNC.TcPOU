<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_HomeNC" Id="{970a142c-358e-492f-9cec-3782954ac4db}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_HomeNC IMPLEMENTS I_Home
VAR
    {attribute 'no_copy'}
    AxisRef : REFERENCE TO AXIS_REF;
    iMotionLogger : I_MotionLogger;
    iLimSwStatus : I_LimSwStatus;
    //iHomeShareData : I_HomeShareData ;
    bCommandMoveHome  : BOOL;
    bBusy			: BOOL;
    bDone			: BOOL;
    bError 			: BOOL;
    bAbort       : BOOL;
    bAborted       : BOOL;
    nErrorID 		: UDINT;
    fRefVeloSearch	: LREAL;
    fRefVeloSync	: LREAL;
    fOffset  : LREAL;
    fPosition	: LREAL;
    bFirstDirection: BOOL;
    rtDone				: R_TRIG;
    rtAborted : R_TRIG;
    sMessage : T_MAXSTRING;
    fbMcSetPos: MC_SetPosition;
    fbMcJog: MC_Jog;
    rtExec: R_TRIG;
    ftExec: F_TRIG;
    nStateMachine: E_HomeStates;
    nStateAfterStop: E_HomeStates;
    nMoves: INT;
    bFirstDir: BOOL;
    bAtHome: BOOL;
    bMove: BOOL;
    nErrCount: INT;
    eHomeMode: E_EpicsHomeCmd :=E_EpicsHomeCmd.NONE;
    bLimForward : BOOL;
    bLimBackward : BOOL;
    bLimHome : BOOL;
    rtReset : R_TRIG;
    bHalted: BOOL;
    bReset : BOOL;
END_VAR

VAR CONSTANT
    (*
        This is a simpler way of disabling the soft limits that ends up being really obvious if something has gone wrong.
        If you turn the limits off/on, not only do you need to keep track of if you had soft limits set,
        but you need to always restore this properly or risk some issue.
        Instead, I set position to a ridiculous value that can always move forward or backward.
        If this gets stuck for any reason it's very clear that something has gone wrong,
        rather than a silent failure of the soft limit marks.
    *)
    FWD_START: LREAL := -99999999;
    BWD_START: LREAL :=  99999999;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[THIS^.AxisRef.ReadStatus();
// Test all homing mode for sync with drive statemachine.
THIS^.fbMcSetPos.Options.ClearPositionLag := TRUE;
THIS^.rtExec(CLK:=THIS^.bCommandMoveHome);
THIS^.ftExec(CLK:=THIS^.bCommandMoveHome);

CASE THIS^.eHomeMode OF
    E_EpicsHomeCmd.LOW_LIMIT:
        THIS^.bFirstDir := FALSE;
        THIS^.bAtHome := NOT THIS^.iLimSwStatus.LimBackward;
        THIS^.bMove := TRUE;
    E_EpicsHomeCmd.HIGH_LIMIT:
        THIS^.bFirstDir := TRUE;
        THIS^.bAtHome := NOT THIS^.iLimSwStatus.LimForward;
        THIS^.bMove := TRUE;
    E_EpicsHomeCmd.HOME_VIA_LOW:
        THIS^.bFirstDir := FALSE;
        THIS^.bAtHome := THIS^.iLimSwStatus.LimHome;
        THIS^.bMove := TRUE;
    E_EpicsHomeCmd.HOME_VIA_HIGH:
        THIS^.bFirstDir := TRUE;
        THIS^.bAtHome := THIS^.iLimSwStatus.LimHome;
        THIS^.bMove := TRUE;
    E_EpicsHomeCmd.ABSOLUTE_SET:
        THIS^.fbMcSetPos(
            Axis:=AxisRef,
            Execute:=THIS^.bCommandMoveHome,
            // to review, this should come from EPICS Itf
            Position:=THIS^.fPosition);
        THIS^.bBusy := THIS^.rtExec.Q;
        THIS^.bDone := NOT THIS^.rtExec.Q;
        THIS^.bMove := FALSE;
    E_EpicsHomeCmd.NONE:
        THIS^.bMove := FALSE;
        THIS^.bBusy := THIS^.rtExec.Q;
        THIS^.bDone := NOT THIS^.rtExec.Q;
    ELSE
        THIS^.bMove := FALSE;
END_CASE

IF THIS^.bMove THEN
    IF THIS^.bBusy AND THIS^.ftExec.Q THEN
        THIS^.nStateMachine := E_HomeStates.ERROR;
        THIS^.bAborted := TRUE;
    END_IF
    CASE THIS^.nStateMachine OF
        // Wait for a rising edge
        E_HomeStates.IDLE:
            THIS^.bBusy := FALSE;
            THIS^.nErrCount := 0;
            THIS^.fbMcSetPos(
                Axis:=AxisRef,
                Execute:=FALSE);
            THIS^.fbMcJog(
                Axis:=AxisRef,
                JogForward:=FALSE,
                JogBackwards:=FALSE);
            IF THIS^.rtExec.Q THEN
                THIS^.nStateMachine := E_HomeStates.NEXT_MOVE;
                nMoves := 0;
                THIS^.bDone := FALSE;
                THIS^.bBusy := TRUE;
                THIS^.bError := FALSE;
                THIS^.nErrorID := 0;
                THIS^.bAborted := FALSE;
            END_IF
        // Figure out whether to move forward, move backward, or give up
        E_HomeStates.NEXT_MOVE:
            THIS^.fbMcSetPos(
                Axis:=AxisRef,
                Execute:=FALSE);
            THIS^.fbMcJog(
                Axis:=AxisRef,
                JogForward:=FALSE,
                JogBackwards:=FALSE);
            CASE nMoves OF
                0:
                    IF THIS^.bFirstDir THEN
                        nStateAfterStop := E_HomeStates.CHECK_FWD;
                    ELSE
                        nStateAfterStop := E_HomeStates.CHECK_BWD;
                    END_IF
                1:
                    IF NOT THIS^.bFirstDir THEN
                        nStateAfterStop := E_HomeStates.CHECK_FWD;
                    ELSE
                        nStateAfterStop := E_HomeStates.CHECK_BWD;
                    END_IF
                ELSE
                    nStateAfterStop := E_HomeStates.ERROR;
            END_CASE
            nMoves := nMoves + 1;
            IF THIS^.bAtHome THEN
                nStateAfterStop := E_HomeStates.FINAL_MOVE;
            END_IF
            THIS^.nStateMachine := E_HomeStates.WAIT_STOP;
        // Move forward until we find the home signal or reach end of travel
        E_HomeStates.CHECK_FWD:
            THIS^.fbMcSetPos(
                Axis:=AxisRef,
                Execute:=TRUE,
                Position:=FWD_START);
            THIS^.fbMcJog(
                Axis:=AxisRef,
                JogForward:=THIS^.iLimSwStatus.LimForward AND NOT bATHome,
                JogBackwards:=FALSE,
                Mode:=E_JogMode.MC_JOGMODE_CONTINOUS,
                Velocity:=THIS^.fRefVeloSearch);
            IF NOT THIS^.fbMcJog.JogForward THEN
                THIS^.nStateMachine := E_HomeStates.NEXT_MOVE;
            ELSIF THIS^.fbMcJog.Error THEN
                THIS^.fbMcJog(
                    Axis:=AxisRef,
                    JogForward:=FALSE,
                    JogBackwards:=FALSE);
                THIS^.nErrCount := THIS^.nErrCount + 1;
                IF THIS^.nErrCount >= 3 THEN
                    THIS^.nStateMachine := E_HomeStates.ERROR;
                END_IF
            END_IF
        // Move backward until we find the home signal or reach end of travel
        E_HomeStates.CHECK_BWD:
            THIS^.fbMcSetPos(
                Axis:=AxisRef,
                Execute:=TRUE,
                Position:=BWD_START);
            THIS^.fbMcJog(
                Axis:=AxisRef,
                JogForward:=FALSE,
                JogBackwards:=THIS^.iLimSwStatus.LimBackward AND NOT bAtHome,
                Mode:=E_JogMode.MC_JOGMODE_CONTINOUS,
                Velocity:=THIS^.fRefVeloSearch);
            IF NOT THIS^.fbMcJog.JogBackwards THEN
                THIS^.nStateMachine := E_HomeStates.NEXT_MOVE;
            ELSIF THIS^.fbMcJog.Error THEN
                THIS^.fbMcJog(
                    Axis:=AxisRef,
                    JogForward:=FALSE,
                    JogBackwards:=FALSE);
                THIS^.nErrCount := THIS^.nErrCount + 1;
                IF THIS^.nErrCount >= 3 THEN
                    THIS^.nStateMachine := E_HomeStates.ERROR;
                END_IF
            END_IF
        // Set position to get within soft lims, move slowly off signal
        E_HomeStates.FINAL_MOVE:
            THIS^.fbMcSetPos(
                Axis:=AxisRef,
                Execute:=TRUE,
                Position:=THIS^.fPosition);
            IF THIS^.bAtHome THEN
                THIS^.fbMcJog(
                    Axis:=AxisRef,
                    JogForward:=NOT bFirstDir,
                    JogBackwards:=bFirstDir,
                    Mode:=E_JogMode.MC_JOGMODE_CONTINOUS,
                    Velocity:=THIS^.fRefVeloSync);
            ELSIF THIS^.fbMcJog.Error THEN
                THIS^.fbMcJog(
                    Axis:=AxisRef,
                    JogForward:=FALSE,
                    JogBackwards:=FALSE);
                THIS^.nErrCount := THIS^.nErrCount + 1;
                IF THIS^.nErrCount >= 3 THEN
                    THIS^.nStateMachine := E_HomeStates.ERROR;
                END_IF
            ELSE
                THIS^.fbMcJog(
                    Axis:=AxisRef,
                    JogForward:=FALSE,
                    JogBackwards:=FALSE);
                THIS^.fbMcSetPos(
                    Axis:=AxisRef,
                    Execute:=FALSE);
                THIS^.nStateMachine := E_HomeStates.WAIT_STOP;
                nStateAfterStop := E_HomeStates.FINAL_SETPOS;
            END_IF
        E_HomeStates.FINAL_SETPOS:
            THIS^.fbMcSetPos(
                Axis:=AxisRef,
                Execute:=TRUE,
                Position:=THIS^.fPosition);
            THIS^.nStateMachine := E_HomeStates.IDLE;
            THIS^.bBusy := FALSE;
            THIS^.bDone := TRUE;
        E_HomeStates.ERROR:
            THIS^.bError := TRUE;
            THIS^.nErrorID := THIS^.fbMcJog.ErrorID;
            nStateMachine := E_HomeStates.FINAL_SETPOS;
            THIS^.fbMcSetPos(
                Axis:=AxisRef,
                Execute:=FALSE);
            IF bAborted THEN
                THIS^.sMessage := 'Homing interrupted';
            ELSE
               THIS^.sMessage := 'Homing failure';
            END_IF
        E_HomeStates.WAIT_STOP:
            IF AxisRef.Status.NotMoving THEN
                THIS^.nStateMachine := nStateAfterStop;
            END_IF
    END_CASE
END_IF

// Reset execute after when done successfull or after abort reset
// this way the done and error condition is latched till next move or global reset.
rtDone(CLK:=bDone);
IF  rtDone.Q  THEN
    THIS^.bCommandMoveHome := FALSE;
END_IF

// an interruption can be external i.e, an halt, Reset or a local condition
THIS^.rtReset(CLK:=bReset);
IF THIS^.rtReset.Q THEN
    THIS^.bError := FALSE;
    THIS^.nErrorID := 0;
    THIS^.bAborted := FALSE;
    THIS^.sMessage := '';
END_IF
]]></ST>
    </Implementation>
    <Property Name="Aborted" Id="{b3440598-2192-4aa3-bd94-648810782f1d}">
      <Declaration><![CDATA[PROPERTY Aborted : BOOL
]]></Declaration>
      <Get Name="Get" Id="{6a45fc91-d1f8-4045-827a-687d21932173}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Aborted := bAborted;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Active" Id="{4386ac45-3e88-4c79-8d18-81c7e83c1e8e}">
      <Declaration><![CDATA[{warning 'Add property implementation'}
PROPERTY Active : BOOL
]]></Declaration>
      <Get Name="Get" Id="{bdd5f606-f201-4f1a-9491-5ed9fc2ed98d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Busy" Id="{c7e43be2-48b0-438b-8ceb-465d60425bfc}">
      <Declaration><![CDATA[{warning 'add property implementation'}
PROPERTY Busy : BOOL
]]></Declaration>
      <Get Name="Get" Id="{cb0740bd-cd32-462e-8d30-3401b18588d5}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Busy := THIS^.bBusy;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="CommandMoveHome" Id="{c1145d52-1896-4af8-b2b7-a223c1c65f11}">
      <Declaration><![CDATA[{warning 'Add property implementation'}
PROPERTY CommandMoveHome : BOOL
]]></Declaration>
      <Set Name="Set" Id="{443e87d8-297e-4ddd-9393-eaac57dec414}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ bCommandMoveHome := CommandMoveHome;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Done" Id="{a400b97e-6245-4667-8036-7fb53f8ce97f}">
      <Declaration><![CDATA[{warning 'add property implementation'}
PROPERTY Done : BOOL
]]></Declaration>
      <Get Name="Get" Id="{aef52b53-9bff-4703-970f-52b560ffba73}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Done := THIS^.bDone;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Error" Id="{d9029227-7d8c-4426-821a-d46327fbfa6d}">
      <Declaration><![CDATA[{warning 'add property implementation'}
PROPERTY Error : BOOL
]]></Declaration>
      <Get Name="Get" Id="{4884c9e1-0ab0-469e-aae8-b83b96b6f583}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Error := THIS^.bError;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="ErrorID" Id="{cf64e9b6-c8bf-4aa1-9fa1-b62063c78b03}">
      <Declaration><![CDATA[{warning 'add property implementation'}
PROPERTY ErrorID : UDINT
]]></Declaration>
      <Get Name="Get" Id="{e14def51-9c37-4182-ba09-611583cf679e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ErrorID := THIS^.nErrorID;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_Init" Id="{36203808-aa8e-419d-b89f-47cad560b581}">
      <Declaration><![CDATA[//FB_Init is always available implicitly and it is used primarily for initialization.
//The return value is not evaluated. For a specific influence, you can also declare the
//methods explicitly and provide additional code there with the standard initialization
//code. You can evaluate the return value.
METHOD FB_Init: BOOL
VAR_INPUT
    bInitRetains: BOOL; // TRUE: the retain variables are initialized (reset warm / reset cold)
    bInCopyCode: BOOL;  // TRUE: the instance will be copied to the copy code afterward (online change)
    AxisRef : REFERENCE TO AXIS_REF;
    iMotionLogger : I_MotionLogger;
    iLimSwStatus : I_LimSwStatus;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.AxisRef REF= AxisRef;
THIS^.iMotionLogger := iMotionLogger;
THIS^.iLimSwStatus:= iLimSwStatus;]]></ST>
      </Implementation>
    </Method>
    <Property Name="GlobalReset" Id="{00f8b067-c919-41e0-b13e-0ee4b8e73fa7}">
      <Declaration><![CDATA[{warning 'Add property implementation'}
PROPERTY GlobalReset : BOOL
]]></Declaration>
      <Set Name="Set" Id="{c71b201c-0b06-41a3-a0b3-32975c4371c2}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bReset := GlobalReset;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Home" Id="{bc450e32-fe3c-4fef-961a-7ec21133b561}">
      <Declaration><![CDATA[METHOD  Home
VAR_INPUT
    Execute	: BOOL;
    HomeSpeedFast	: LREAL;
    HomeSpeedSlow	: LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.bCommandMoveHome := Execute;
THIS^.fRefVeloSearch := HomeSpeedFast;
THIS^.fRefVeloSync := HomeSpeedSlow;

]]></ST>
      </Implementation>
    </Method>
    <Property Name="Message" Id="{50dd0817-9d23-4b27-bd5b-fe17ea82eb6e}">
      <Declaration><![CDATA[PROPERTY Message : T_MAXSTRING
]]></Declaration>
      <Get Name="Get" Id="{5582f213-525c-49f8-9472-dcc0e7068f61}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Message := sMessage;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Mode" Id="{bacfc68b-674d-49fb-a838-6a7b08d66c8b}">
      <Declaration><![CDATA[PROPERTY Mode : E_EpicsHomeCmd
]]></Declaration>
      <Get Name="Get" Id="{018ebc11-483b-4d91-b1ca-54274e9fa554}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Mode := eHomeMode;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{d7a9685a-e050-4fa2-92a8-d25079a18728}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[eHomeMode := Mode;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Offset" Id="{48496da5-ced9-4c7a-88b4-656a32aa685b}">
      <Declaration><![CDATA[{warning 'Add property implementation'}
PROPERTY Offset : LREAL
]]></Declaration>
      <Set Name="Set" Id="{0ef7a418-62f9-4e76-9f2c-837b987f3900}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[fOffset := Offset;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Position" Id="{afef80c7-a1a3-4197-a7a0-d9553542477a}">
      <Declaration><![CDATA[{warning 'Add property implementation'}
PROPERTY Position : LREAL
]]></Declaration>
      <Set Name="Set" Id="{6ac419d4-6add-4703-8089-625e0296877b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[fPosition := Position;]]></ST>
        </Implementation>
      </Set>
    </Property>
  </POU>
</TcPlcObject>