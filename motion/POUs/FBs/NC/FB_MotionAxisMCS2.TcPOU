<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_MotionAxisMCS2" Id="{0e4f30c7-9701-46fd-b9a3-891c9877e9a0}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'call_after_init'}
FUNCTION_BLOCK FB_MotionAxisMCS2 IMPLEMENTS I_MotionAxisDS402
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
    // perhaps use a structure no to repeat this code
    // derivation has a strong case here.
    iHome : I_HomeDS402;
    iHalt : I_Halt;
    iPower : I_Power;
    iReset : I_Reset;
    iMoveAbsolute : I_MoveAbsolute;
    iReadParameter : I_ReadParameter;
    iWriteParameter  : I_WriteParameter;
    iParamSaveRestore: I_ParamSaveRestore;
    iEncoderScaling : I_EncoderScaling;
    iAxisStatus : I_AxisStatus;
    iBacklashCompensation : I_BacklashCompensation;
    iLimSwStatus : I_LimSwStatusMCS2;
    stDS402Drive : ST_DS402Drive;

    bError: BOOL;
    bBusy : BOOL;
    bDone : BOOL;
    bModeSet : BOOL;
    nErrorID: UDINT;
    sMessage : T_MAXSTRING;
    rtAbortDone : R_TRIG;
    rtDone : R_TRIG;
    // Default is CSP
    nModeOfOperation : SINT := 8;
    nModeOfOperationDisplay : SINT;
    bStartMove : BOOL;
    bOperational: BOOL;
    nDS402DriveControl :	UINT := 15;
    rtNCModeUpdate : R_TRIG;
    rtGenericModeUpdate : R_TRIG;
    rtHomeDone : R_TRIG;
    bReportOnce : BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*Operation enbaled*)
IF stDS402Drive.stDriveStatus.ReadyToSwitchOn
    AND stDS402Drive.stDriveStatus.SwitchedOn
    AND stDS402Drive.stDriveStatus.OperationEnabled
    AND NOT stDS402Drive.stDriveStatus.Fault
    AND stDS402Drive.stDriveStatus.VoltageEnabled
    AND stDS402Drive.stDriveStatus.QuickStopActive
    AND NOT stDS402Drive.stDriveStatus.SwitchOnDisabled THEN
    bOperational := TRUE;
END_IF

// We Forwwarding internal MCS2 limits, that's soft limits or end stop status locally, to keep
// fbMotionDrive implmentation generic
THIS^.iLimSwStatus.InternalLimits(	InternalLimitActive:=stDS402Drive.stDriveStatus.InternalLimitActive,
                                    WarningCondition:=stDS402Drive.stDriveStatus.WarningCondition
                                 );
// NB: Homing is stDS402Drive agnostice thus, these status must be passed cyclicly
// the status are hardware I/O provided, thus must be link to drive registers
THIS^.iHome.DS402Status(	ModeOfOperationDisplay:=THIS^.stDS402Drive.nModeOfOperationDisplay,
                            Bit13OpModeSpecific:=THIS^.stDS402Drive.stDriveStatus.Bit13_OpModeSpecific,
                            Bit12OpModeSpecific:=THIS^.stDS402Drive.stDriveStatus.Bit12_OpModeSpecific,
                            TargetReached:=THIS^.stDS402Drive.stDriveStatus.TargetReached );

// Critical : do not remove
rtHomeDone(CLK:=THIS^.iHome.Done);
IF rtHomeDone.Q THEN
    THIS^.nModeOfOperation := THIS^.iHome.DS402ModeOfOperation;
    THIS^.nDS402DriveControl:=THIS^.nDS402DriveControl;
END_IF

IF THIS^.iHome.Busy THEN
    THIS^.nDS402DriveControl:= THIS^.iHome.DS402Control;
END_IF

rtNCModeUpdate(CLK:=THIS^.stDS402Drive.nModeOfOperationNC = nModeOfOperation);
rtGenericModeUpdate(CLK:=nModeOfOperation <> THIS^.stDS402Drive.nModeOfOperationNC);
IF rtNCModeUpdate.Q THEN
    THIS^.stDS402Drive.nModeOfOperation := THIS^.stDS402Drive.nModeOfOperationNC;
END_IF

IF rtGenericModeUpdate.Q THEN
    THIS^.stDS402Drive.nModeOfOperation := nModeOfOperation;
END_IF

// Generic NC write
//THIS^.nDS402DriveControl := THIS^.nDS402DriveControl OR THIS^.stDS402Drive.nDS402DriveControlNC;

// IF THIS^.nDS402DriveControl <> THIS^.stDS402Drive.nDS402DriveControl THEN
// 	THIS^.stDS402Drive.nDS402DriveControl:= THIS^.nDS402DriveControl;
// END_IF

IF THIS^.stDS402Drive.nModeOfOperationDisplay = 8 THEN
    IF THIS^.stDS402Drive.nDS402DriveControl <> THIS^.stDS402Drive.nDS402DriveControlNC THEN
        THIS^.stDS402Drive.nDS402DriveControl := THIS^.stDS402Drive.nDS402DriveControlNC;
    END_IF

ELSIF THIS^.stDS402Drive.nModeOfOperationDisplay = 6 THEN
    IF THIS^.stDS402Drive.nDS402DriveControl <> THIS^.nDS402DriveControl THEN
        THIS^.stDS402Drive.nDS402DriveControl:= THIS^.nDS402DriveControl;
    END_IF

END_IF

bBusy :=	THIS^.iHome.Busy;
bDone:=	THIS^.iHome.Done;
bError:=	THIS^.iHome.Error;
nErrorID:=	THIS^.iHome.ErrorID;

// Forward the abort event to homing block ( this is to sync the home state machine)
// Clear local execs flags after a completed move or a completed interruption
rtAbortDone(CLK:=(THIS^.iHalt.Done OR THIS^.iReset.Done));
IF  rtAbortDone.Q THEN
    THIS^.iMoveAbsolute.CommandMoveAbsolute := FALSE;
    THIS^.iHome.CommandMoveHome := FALSE;
    THIS^.bStartMove := FALSE;
    // forward global reset done event;

    THIS^.iHome.GlobalReset := THIS^.iReset.Done;
END_IF
// handle combined Errors conditions
THIS^.ErrorHandling();

]]></ST>
    </Implementation>
    <Property Name="AbortDone" Id="{374c53b8-e916-472e-ade8-b85325191589}">
      <Declaration><![CDATA[PROPERTY AbortDone : BOOL
]]></Declaration>
      <Get Name="Get" Id="{6b245bad-f401-4f8e-9264-4a2584d556cc}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[AbortDone := THIS^.iHalt.Done OR THIS^.iReset.Done;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Aborted" Id="{4156e934-1b40-4455-a852-d13a6f85e247}">
      <Declaration><![CDATA[PROPERTY Aborted : BOOL
]]></Declaration>
      <Get Name="Get" Id="{f64d8356-b5c6-48bb-b87b-e3ae7c0b7754}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ABorted := THIS^.iMoveAbsolute.Aborted;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="AxisEnabled" Id="{ca10feff-4ca4-4f00-8af9-2ad21dbd4fe1}">
      <Declaration><![CDATA[METHOD AxisEnabled : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[AxisEnabled:=THIS^.iAxisStatus.AxisEnabled();]]></ST>
      </Implementation>
    </Method>
    <Property Name="AxisReadParamsInit" Id="{32334eb8-10f2-4d07-ab5b-86ebcd5e11a9}">
      <Declaration><![CDATA[PROPERTY AxisReadParamsInit : BOOL
]]></Declaration>
      <Get Name="Get" Id="{c98ae9f4-6b0e-43dd-855d-ea9149414625}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[AxisReadParamsInit := THIS^.iReadParameter.AxisReadParamsInit;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="AxisState" Id="{9181aaf9-63c5-483a-98c8-6f4d56052b84}">
      <Declaration><![CDATA[PROPERTY AxisState : MC_AxisStates
]]></Declaration>
      <Get Name="Get" Id="{762e0479-bef5-4ed2-8a61-2fa227a0fbc7}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[AxisState := THIS^.iAxisStatus.AxisState;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="BacklashCompensation" Id="{3cbfe54b-fca5-4a08-b7dd-54501e2befa1}">
      <Declaration><![CDATA[(*
    Handle positive/negative backlash compensation
    User needs to set the direction of backlash from the sign of the compensation value
    Backlash compensation is disabled during referencing (homing).
    When direction is positive/negative, further movement in the negative/positive direction not compensated
    further movement in the negative/positive direction will be compensated
*)
METHOD BacklashCompensation
VAR_INPUT
    Active     : BOOL;
    Compensation	: LREAL;
    RampVelocity	: LREAL;
    DisableMode	: E_DISABLEMODE := E_DISABLEMODE.DisableModeHold;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.iBacklashCompensation.BacklashCompensation(	Activate:=Active,
                                                    Compensation:=Compensation,
                                                    RampVelocity:=RampVelocity,
                                                    DisableMode:=DisableMode
                                                );

 ]]></ST>
      </Implementation>
    </Method>
    <Method Name="BacklashCompensationActive" Id="{4d3c7c36-fb90-4b0f-9a3e-ed6c33ee0af5}">
      <Declaration><![CDATA[(*synced Fbs need just to activate the compensation with a given ramp speed
  other parameters are provided via EPICS (declared in this FB) or via the more extended BackalshCompensation method (simulation) *)
METHOD BacklashCompensationActive
VAR_INPUT
    Active	: BOOL;
    RampVelocity	: LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.iBacklashCompensation.BacklashCompensationActive( Active:=Active,
                                                        RampVelocity:=RampVelocity );]]></ST>
      </Implementation>
    </Method>
    <Property Name="BacklashCompStatus" Id="{f644499f-f560-492d-91c8-383f5866b106}">
      <Declaration><![CDATA[{warning 'Add property implementation'}
PROPERTY BacklashCompStatus : BOOL
]]></Declaration>
      <Get Name="Get" Id="{b03b55e8-e4d2-411d-a256-be8f86227bd3}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="BacklashCompUserEn" Id="{e14ee1fc-526a-41de-bf16-0f34a34b5dd8}">
      <Declaration><![CDATA[PROPERTY BacklashCompUserEn : BOOL
]]></Declaration>
      <Set Name="Set" Id="{9ff60291-485b-49f5-8d73-ff6ca3f74134}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[THIS^.iBacklashCompensation.UserEnable:=BacklashCompUserEn;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Busy" Id="{578b3c05-4979-42ec-a4d0-8e76f72dc0fa}">
      <Declaration><![CDATA[PROPERTY Busy : BOOL
]]></Declaration>
      <Get Name="Get" Id="{e6e5c3cc-a354-4dce-8e29-2956aae35a29}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Busy := THIS^.iHome.Busy OR THIS^.iMoveAbsolute.Busy;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="CallAfterInit" Id="{392e76f7-a514-4532-ba7d-f983b4d0999b}">
      <Declaration><![CDATA[METHOD PUBLIC CallAfterInit
VAR_INPUT
    iHome : I_HomeDS402;
    iHalt : I_Halt;
    iPower : I_Power;
    iReset : I_Reset;
    iMoveAbsolute : I_MoveAbsolute;
    iReadParameter : I_ReadParameter;
    iWriteParameter  : I_WriteParameter;
    iParamSaveRestore: I_ParamSaveRestore;
    iEncoderScaling : I_EncoderScaling;
    iAxisStatus : I_AxisStatus;
    iBacklashCompensation : I_BacklashCompensation;
    iLimSwStatus : I_LimSwStatusMCS2;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.iHome := iHome;
THIS^.iHalt := iHalt;
THIS^.iPower := iPower;
THIS^.iReset := iReset;
THIS^.iMoveAbsolute := iMoveAbsolute;
THIS^.iReadParameter := iReadParameter ;
THIS^.iWriteParameter  := iWriteParameter;
THIS^.iParamSaveRestore:= iParamSaveRestore;
THIS^.iEncoderScaling := iEncoderScaling;
THIS^.iAxisStatus := iAxisStatus;
THIS^.iBacklashCompensation  := iBacklashCompensation ;
THIS^.iLimSwStatus := iLimSwStatus;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Done" Id="{981479f9-c694-4d1a-be9a-1752e6deb595}">
      <Declaration><![CDATA[PROPERTY Done : BOOL
]]></Declaration>
      <Get Name="Get" Id="{91103579-069e-4364-b8aa-ad07e400a647}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Done := THIS^.iHome.Done OR THIS^.iMoveAbsolute.Done;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Error" Id="{9fe1588b-412f-4605-918b-c5f99c799aa8}">
      <Declaration><![CDATA[PROPERTY Error : BOOL
]]></Declaration>
      <Get Name="Get" Id="{c4e6bfd0-9a24-4e18-b425-f001b24ab2c0}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Error := bError;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="ErrorHandling" Id="{343e873e-1fe5-4eb8-99b8-88802101a3d0}">
      <Declaration><![CDATA[METHOD ErrorHandling
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*
    Error from functions and Nc
    The error will send to EPICS interface based on predifined
    priority: axis, power, backlash, absoluteMove, etc...
*)
IF THIS^.iAxisStatus.Error  THEN
    bError:=THIS^.iAxisStatus.Error;
    nErrorId:=THIS^.iAxisStatus.ErrorID;
    sMessage := THIS^.iAxisStatus.Message;
ELSIF THIS^.iPower.Error AND THIS^.iPower.IsEnabled THEN
    bError:=THIS^.iPower.Error;
    nErrorId:=THIS^.iPower.ErrorID;
    sMessage := THIS^.iPower.Message;
ELSIF THIS^.iBacklashCompensation.Error THEN
    bError:=THIS^.iBacklashCompensation.Error;
    nErrorId:=THIS^.iBacklashCompensation.ErrorID;
    sMessage := THIS^.iBacklashCompensation.Message;
ELSIF THIS^.iMoveAbsolute.Error THEN
    bError:=THIS^.iMoveAbsolute.Error;
    nErrorId:=THIS^.iMoveAbsolute.ErrorID;
    sMessage := THIS^.iMoveAbsolute.Message;
ELSIF THIS^.iHome.Error (*Homing error*) THEN
    bError:=THIS^.iHome.Error;
    nErrorId:=THIS^.iHome.ErrorID;
    sMessage := THIS^.iHome.Message;
ELSIF THIS^.iHalt.Error AND THIS^.iHalt.Active THEN
    bError:=THIS^.iHalt.Error;
    nErrorId:=THIS^.iHalt.ErrorID;
    sMessage := THIS^.iHalt.Message;
ELSIF THIS^.iReset.Error  THEN
    bError:=THIS^.iReset.Error;
    nErrorId:=THIS^.iReset.ErrorID;
    sMessage := THIS^.iReset.Message;
ELSIF THIS^.iReadParameter.Error THEN
    bError := THIS^.iReadParameter.Error;
    nErrorId := THIS^.iReadParameter.ErrorID;
    sMessage := THIS^.iReadParameter.Message;
ELSIF THIS^.iWriteParameter.Error THEN
    bError := THIS^.iWriteParameter.Error;
    nErrorId := THIS^.iWriteParameter.ErrorID;
    sMessage := THIS^.iWriteParameter.Message;
ELSIF THIS^.iParamSaveRestore.Error THEN
    bError := THIS^.iParamSaveRestore.Error;
    nErrorId := THIS^.iParamSaveRestore.ErrorID;
    sMessage := THIS^.iParamSaveRestore.Message;
ELSE
    bError:=FALSE;
    nErrorId:=0;
    sMessage := '';
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Property Name="ErrorID" Id="{62fe70e2-cbbe-4206-8465-ac97709764ea}">
      <Declaration><![CDATA[PROPERTY ErrorID : UDINT
]]></Declaration>
      <Get Name="Get" Id="{adeaeec9-70c6-46d4-8459-1ae1d32f2798}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ErrorID := THIS^.nErrorID;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_Init" Id="{1dac3e04-3581-442d-91f0-9c2dc1b453ee}">
      <Declaration><![CDATA[(*FB_Init is always available implicitly and it is used primarily for initialization.
The return value is not evaluated. For a specific influence, you can also declare the
methods explicitly and provide additional code there with the standard initialization
code. You can evaluate the return value.*)
METHOD FB_Init : BOOL
VAR_INPUT
    (* TRUE: the retain variables are initialized (reset warm / reset cold)*)
    bInitRetains	: BOOL;
    (* TRUE: the instance will be copied to the copy code afterward (online change)*)
    bInCopyCode	: BOOL;
    iHome : I_HomeDS402;
    iHalt : I_Halt;
    iPower : I_Power;
    iReset : I_Reset;
    iMoveAbsolute : I_MoveAbsolute;
    iReadParameter : I_ReadParameter;
    iWriteParameter  : I_WriteParameter;
    iParamSaveRestore: I_ParamSaveRestore;
    iEncoderScaling : I_EncoderScaling;
    iAxisStatus : I_AxisStatus;
    iBacklashCompensation : I_BacklashCompensation;
    iLimSwStatus : I_LimSwStatusMCS2;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.iHome := iHome;
THIS^.iHalt := iHalt;
THIS^.iPower := iPower;
THIS^.iReset := iReset;
THIS^.iMoveAbsolute := iMoveAbsolute;
THIS^.iReadParameter := iReadParameter ;
THIS^.iWriteParameter  := iWriteParameter;
THIS^.iParamSaveRestore:= iParamSaveRestore;
THIS^.iEncoderScaling := iEncoderScaling;
THIS^.iAxisStatus := iAxisStatus;
THIS^.iBacklashCompensation  := iBacklashCompensation ;
THIS^.iLimSwStatus := iLimSwStatus;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Halt" Id="{d4ec37ef-180a-4be0-827e-94d1034c9fea}">
      <Declaration><![CDATA[METHOD Halt
VAR_INPUT
    Execute	: BOOL;
    Deceleration	: LREAL := 0;
    Jerk	: LREAL := 0;
    BufferMode	: MC_BufferMode := MC_BufferMode.MC_Aborting;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.iHalt.Halt( Execute:=Execute,
                     Deceleration:=Deceleration,
                    Jerk:=Jerk ,
                    BufferMode:=BufferMode );]]></ST>
      </Implementation>
    </Method>
    <Property Name="HaltActive" Id="{35227419-4529-4956-aa2d-48519159746f}">
      <Declaration><![CDATA[{warning 'Add property implementation'}
PROPERTY HaltActive : BOOL
]]></Declaration>
      <Get Name="Get" Id="{0d2c6a63-e105-4274-9270-84e6cefd82f6}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="HaltBusy" Id="{93f9fecf-b17d-42c9-a5c3-52833b5d3ce2}">
      <Declaration><![CDATA[{warning 'Add property implementation'}
PROPERTY HaltBusy : BOOL
]]></Declaration>
      <Get Name="Get" Id="{fdfff023-0454-434e-94aa-756ad214aada}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="HaltDone" Id="{86288e35-2305-4f09-b91e-62b5f3ac95b1}">
      <Declaration><![CDATA[PROPERTY HaltDone : BOOL
]]></Declaration>
      <Get Name="Get" Id="{748043de-3db2-4500-91f8-17ae79bb0d56}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[HaltDone := THIS^.iHalt.Done;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Home" Id="{eb6ca2c3-dadc-488d-aa64-29befcb2a8c6}">
      <Declaration><![CDATA[METHOD Home
VAR_INPUT
    Execute	: BOOL;
    HomeSpeedFast	: LREAL;
    HomeSpeedSlow	: LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// then call the
THIS^.iHome.Home(Execute:=Execute, HomeSpeedFast:=HomeSpeedFast, HomeSpeedSlow:=HomeSpeedSlow);
]]></ST>
      </Implementation>
    </Method>
    <Property Name="HomeBusy" Id="{120358f8-1638-4a9d-846b-d914e71b3608}">
      <Declaration><![CDATA[PROPERTY HomeBusy : BOOL
]]></Declaration>
      <Get Name="Get" Id="{d96b7d9f-05a4-416a-b556-429a717df190}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[HomeBusy := THIS^.iHome.Busy;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="HomeDone" Id="{546d39e6-f883-4c11-9aab-5aa9ff4d09c0}">
      <Declaration><![CDATA[PROPERTY HomeDone : BOOL
]]></Declaration>
      <Get Name="Get" Id="{4a3157da-152a-443d-9f98-241770a79ad1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[HomeDone := THIS^.iHome.Done;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="HomeMode" Id="{b93e43bf-64d4-49dd-914c-3ebb62170b14}">
      <Declaration><![CDATA[{warning 'Add property implementation'}
PROPERTY HomeMode : E_EpicsHomeCmd
]]></Declaration>
      <Get Name="Get" Id="{622801fe-c552-45ac-a4f2-6aeabaf9494b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[HomeMode := THIS^.iHome.Mode;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="InTargetPosition" Id="{4d445891-163f-4111-83eb-60f09ddee9d3}">
      <Declaration><![CDATA[PROPERTY InTargetPosition : BOOL
]]></Declaration>
      <Get Name="Get" Id="{78eb0d62-9d11-498f-9b62-d0ea3022166c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[InTargetPosition := THIS^.iAxisStatus.InTargetPosition;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="MeasuredAcceleration" Id="{fde439bd-ceac-447d-b568-038bedb4787b}">
      <Declaration><![CDATA[PROPERTY MeasuredAcceleration : LREAL
]]></Declaration>
      <Get Name="Get" Id="{6817404e-1f00-4263-9e20-e124994469e2}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MeasuredAcceleration := THIS^.iAxisStatus.MeasuredAcceleration;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="MeasuredCompensation" Id="{2e022ece-f4bb-4740-bf80-f212d43fd71f}">
      <Declaration><![CDATA[PROPERTY MeasuredCompensation : LREAL
]]></Declaration>
      <Get Name="Get" Id="{51a19da8-1a6e-4644-9321-5c1f9eef648e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MeasuredCompensation := THIS^.iBacklashCompensation.ActCompensation;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="MeasuredPosition" Id="{6cf29060-4b4f-441e-be73-6bd263e8a5e1}">
      <Declaration><![CDATA[PROPERTY MeasuredPosition : LREAL
]]></Declaration>
      <Get Name="Get" Id="{ece6ca55-4e88-4e0c-90de-6b353d74e67c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MeasuredPosition := THIS^.iAxisStatus.MeasuredPosition;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="MeasuredPositionDiff" Id="{0218e957-e0a4-4da4-976c-945e9f411fbc}">
      <Declaration><![CDATA[PROPERTY MeasuredPositionDiff : LREAL
]]></Declaration>
      <Get Name="Get" Id="{90598c1b-8361-437f-b77f-7a6dad08ddaf}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MeasuredPositionDiff := THIS^.iAxisStatus.MeasuredPositionDiff;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="MeasuredVelocity" Id="{6b852a66-e760-4085-88e2-79922e5f7ea6}">
      <Declaration><![CDATA[PROPERTY MeasuredVelocity : LREAL
]]></Declaration>
      <Get Name="Get" Id="{62e95f94-4579-4306-a03b-7cf42338fcc9}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MeasuredVelocity := THIS^.iAxisStatus.MeasuredVelocity;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Message" Id="{beedbba4-7ec8-43f2-bdf8-e3dfd5016351}">
      <Declaration><![CDATA[PROPERTY Message : T_MaxString
]]></Declaration>
      <Get Name="Get" Id="{97f605d0-b60f-4441-9824-809353c47817}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Message :=sMessage;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="ModeOfOperation" Id="{b52ebe5d-9983-420e-838a-c6d4f4dd39c1}">
      <Declaration><![CDATA[METHOD ModeOfOperation : BOOL;
VAR_INPUT
    RecentModeOfOperation : E_DS402OpMode;
END_VAR


]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.bModeSet := FALSE;
IF THIS^.stDS402Drive.nModeOfOperationDisplay <> RecentModeOfOperation THEN
    THIS^.nModeOfOperation := RecentModeOfOperation;
    THIS^.bModeSet := FALSE;
ELSE
    THIS^.bModeSet := TRUE;
END_IF

ModeOfOperation := THIS^.bModeSet;]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveAbsolute" Id="{781fcd7e-4774-4268-81a1-b3c3c7f5e72f}">
      <Declaration><![CDATA[METHOD MoveAbsolute
VAR_INPUT
    Execute     : BOOL;
    Position	: LREAL;
    Velocity	: LREAL;
    Acceleration	: LREAL := 0.0;
    Deceleration	: LREAL := 0.0;
    Jerk	: LREAL := 0.0;
    BufferMode	: MC_BufferMode := MC_BufferMode.MC_Aborting;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.iMoveAbsolute.MoveAbsolute( 	Execute:=Execute,
                                    Position:=Position,
                                       Velocity := Velocity,
                                    Acceleration := Acceleration,
                                    Deceleration := Deceleration,
                                    Jerk := Jerk,
                                    BufferMode := BufferMode);
]]></ST>
      </Implementation>
    </Method>
    <Property Name="MoveAbsoluteAborted" Id="{5813dcd7-b1f8-48f9-9b13-3719479eeba2}">
      <Declaration><![CDATA[{warning 'Add property implementation'}
PROPERTY MoveAbsoluteAborted : BOOL
]]></Declaration>
      <Get Name="Get" Id="{98863092-2796-4164-90ef-b53e25045c41}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MoveAbsoluteAborted := THIS^.iMoveAbsolute.Aborted;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="MoveAbsoluteActive" Id="{373314df-6b0c-466e-b451-6706f56ed883}">
      <Declaration><![CDATA[{warning 'Add property implementation'}
PROPERTY MoveAbsoluteActive : BOOL
]]></Declaration>
      <Get Name="Get" Id="{387115e3-2e0c-4c0c-99bd-7616b9c161ed}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="MoveAbsoluteBusy" Id="{90de2003-6a05-43e8-a6c2-96aedbe6d620}">
      <Declaration><![CDATA[PROPERTY MoveAbsoluteBusy : BOOL
]]></Declaration>
      <Get Name="Get" Id="{1daf24c7-87ab-4eff-899e-03b4a03ab146}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MoveAbsoluteBusy := THIS^.iMoveAbsolute.Busy;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="MoveAbsoluteDone" Id="{8f337d45-ab01-4450-b8b4-8d2bd030948b}">
      <Declaration><![CDATA[{warning 'Add property implementation'}
PROPERTY MoveAbsoluteDone : BOOL
]]></Declaration>
      <Get Name="Get" Id="{f717b2f3-066e-4bce-bc8a-19c7bb7803ed}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MoveAbsoluteDone := THIS^.iMoveAbsolute.Done;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="NegativeMotionIsEnabled" Id="{3c58869b-58ac-4c04-944f-b7005522293b}">
      <Declaration><![CDATA[PROPERTY NegativeMotionIsEnabled : BOOL
]]></Declaration>
      <Get Name="Get" Id="{25ade829-9743-4ef2-9ada-5abe4c62fcf0}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ NegativeMotionIsEnabled := THIS^.iAxisStatus.NegativeMotionIsEnabled;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="PositiveMotionIsEnabled" Id="{756ccefa-9794-406c-b18f-ed07b52748cb}">
      <Declaration><![CDATA[PROPERTY PositiveMotionIsEnabled : BOOL
]]></Declaration>
      <Get Name="Get" Id="{c952e9da-eba6-43bb-abc2-d1df33626a0f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[PositiveMotionIsEnabled := THIS^.iAxisStatus.PositiveMotionIsEnabled;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Power" Id="{fc0aa584-ea73-4eaf-8938-15ff0a2d5f6a}">
      <Declaration><![CDATA[METHOD Power
VAR_INPUT
    Enable	: BOOL;
    Enable_Positive	: BOOL;
    Enable_Negative	: BOOL;
    Override	: LREAL := 100.0;
    BufferMode	: MC_BufferMode := MC_BufferMode.MC_Aborting;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.iPower.Power(	Enable:=Enable,
                    Enable_Positive:= Enable_Positive,
                    Enable_Negative:=Enable_Negative,
                    Override:=Override,
                    BufferMode:=BufferMode
                );]]></ST>
      </Implementation>
    </Method>
    <Property Name="PowerActive" Id="{376b2784-c771-437d-972f-22133de5b9be}">
      <Declaration><![CDATA[{warning 'Add property implementation'}
PROPERTY PowerActive : BOOL
]]></Declaration>
      <Get Name="Get" Id="{5a504d25-7794-45ea-926d-8dcb2e39688b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="PowerEnables" Id="{97836c2c-1367-4cdd-a741-88828ffd0436}">
      <Declaration><![CDATA[(*This is overriden by this object internal acess to the interlock instance
  this is intended to pass power enable flags via the fbMotionDrive
*)
METHOD PowerEnables
VAR_INPUT
    Enable	: BOOL;
    Enable_Positive	: BOOL;
    Enable_Negative	: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.iPower.Power(	Enable:=Enable,
                    Enable_Positive:= Enable_Positive,
                    Enable_Negative:=Enable_Negative,
                    Override:=100.0,
                    BufferMode:=MC_BufferMode.MC_Aborting
                );]]></ST>
      </Implementation>
    </Method>
    <Property Name="PowerIsEnabled" Id="{2019a017-227c-47b7-97fb-dff4903aafb2}">
      <Declaration><![CDATA[PROPERTY PowerIsEnabled : BOOL
]]></Declaration>
      <Get Name="Get" Id="{22a4346b-0f2c-469d-a930-057b483384d8}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="PowerOverride" Id="{664d80c1-5f23-4e82-a16f-5bce8a03ec15}">
      <Declaration><![CDATA[{warning 'Add property implementation'}
PROPERTY PowerOverride : LREAL
]]></Declaration>
      <Get Name="Get" Id="{e02576f5-9fac-4947-a087-f064c2825885}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[PowerOverride := THIS^.iPower.Override;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="ReadAxisParams" Id="{81a84f3a-84cf-4254-9954-3fdb1516b1d4}">
      <Declaration><![CDATA[METHOD ReadAxisParams
VAR_INPUT
    Enable	: BOOL;
    RefreshDelay	: TIME;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.iReadParameter.ReadParameters(Enable:=Enable, RefreshDelay:=RefreshDelay);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset" Id="{4d4369f8-943f-4a1c-a1c1-d8b2bbc9be87}">
      <Declaration><![CDATA[METHOD Reset
VAR_INPUT
    Execute	: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.iReset.Reset(Execute:=Execute);]]></ST>
      </Implementation>
    </Method>
    <Property Name="ResetBusy" Id="{d88f6672-c5e1-43f0-ab40-95f72b3ff1a4}">
      <Declaration><![CDATA[PROPERTY ResetBusy : BOOL
]]></Declaration>
      <Get Name="Get" Id="{172077a0-36c2-4fa0-bd0b-e832b74f5cbf}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ResetBusy := THIS^.iReset.Busy;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="ResetDone" Id="{b2e117ae-ea92-4c10-8a70-709b9a0506f1}">
      <Declaration><![CDATA[PROPERTY ResetDone : BOOL
]]></Declaration>
      <Get Name="Get" Id="{1453bf42-1fdf-4ef2-9e87-ead3dabc873f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ResetDone := THIS^.iReset.Done;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="RestoreDone" Id="{735ea9de-27f6-4b5a-915f-5995f7f868c7}">
      <Declaration><![CDATA[PROPERTY RestoreDone : BOOL
]]></Declaration>
      <Get Name="Get" Id="{fbd606c9-1af0-4c90-ba85-1e171c0c87a5}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[RestoreDone := THIS^.iParamSaveRestore.RestoreDone;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="SaveAxisParams" Id="{03c2e33a-52c1-47ec-94f3-f539fcae2c3c}">
      <Declaration><![CDATA[{warning 'Add method implementation '}
METHOD SaveAxisParams
VAR_INPUT
    Enable	: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.iParamSaveRestore.SaveAxisParams(Enable:=Enable);]]></ST>
      </Implementation>
    </Method>
    <Property Name="SavedPosition" Id="{aa926740-9773-4290-acbd-1ab4f19e25fa}">
      <Declaration><![CDATA[PROPERTY SavedPosition : LREAL
]]></Declaration>
      <Get Name="Get" Id="{50656452-8223-45aa-909c-1b7b5589f360}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[SavedPosition := THIS^.iParamSaveRestore.SavedPosition;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="ScaledEncoderCount" Id="{cfa53524-89d7-4373-b39a-6d14131d0381}">
      <Declaration><![CDATA[PROPERTY ScaledEncoderCount : UDINT
]]></Declaration>
      <Get Name="Get" Id="{65b107b5-f09c-47a5-ba19-4140d478c782}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[//ScaledEncoderCount := THIS^.iAxisParameters.ScaledEncoderCount;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="StandStill" Id="{9c4fc74f-cbef-4500-bc30-6594fe99030f}">
      <Declaration><![CDATA[{warning 'Add property implementation'}
PROPERTY StandStill : BOOL
]]></Declaration>
      <Get Name="Get" Id="{dfbc2698-2c48-4be9-adc8-c7a6e9db2cd8}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[StandStill := THIS^.iAxisStatus.StandStill;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="StartMove" Id="{ae3a68ed-e6ae-4591-9660-a38d4c1bbcc8}">
      <Declaration><![CDATA[(*
    Check all post condition before updating bCommandedMoveAbsolute
    The implmentatation will depend on the axis type
    DS402 NC/Direct axis : Implementation need to check that the drive is in the correct mode before initaiting the move then set bCommandedMoveAbsolute
    MP NC axis : will immediately write to bCommandedMoveAbsolute
*)
METHOD StartMove : BOOL
VAR_INPUT
    MoveMode	: E_EpicsMotorCmd;
    CmdExecute	: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.bStartMove := FALSE;
CASE MoveMode  OF
    E_EpicsMotorCmd.MOVE_ABSOLUTE:
        IF THIS^.ModeOfOperation(RecentModeOfOperation:=8) THEN
            THIS^.iMoveAbsolute.CommandMoveAbsolute := CmdExecute AND bOperational;
            THIS^.bStartMove := TRUE;
        END_IF

    E_EpicsMotorCmd.HOME:
        IF THIS^.ModeOfOperation(RecentModeOfOperation:=6) THEN
            THIS^.iHome.Home( Execute:=CmdExecute AND bOperational,
                                HomeSpeedFast:=THIS^.iReadParameter.RefVeloSearch,
                                HomeSpeedSlow:=THIS^.iReadParameter.RefVeloSync );
            THIS^.bStartMove := TRUE;
        END_IF

END_CASE
// for typical NC axis no further tests needed
StartMove := THIS^.bStartMove;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="Stopped" Id="{3fc8dd04-b557-4a21-8f7b-99bb919123a1}">
      <Declaration><![CDATA[PROPERTY Stopped : BOOL
]]></Declaration>
      <Get Name="Get" Id="{eaab0962-a193-4b99-98ea-dcdb5bfcef43}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Stopped := THIS^.iAxisStatus.Stopped;
]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>